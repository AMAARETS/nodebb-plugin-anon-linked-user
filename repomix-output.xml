This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.vs/ProjectSettings.json
.vs/VSWorkspaceState.json
הוקים
index.js
package.json
plugin.json
static/lib/admin.js
static/lib/client.js
static/templates/account/anon-is-in.tpl
static/templates/account/anonymous-create.tpl
static/templates/account/noAllowed.tpl
static/templates/admin/plugins/anon-profile.tpl
static/templates/composer.tpl
static/templates/partials/composer-title-container.tpl
static/templates/partials/sidebar/change-user.tpl
static/templates/partials/sidebar/user-menu.tpl
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".vs/ProjectSettings.json">
{
  "CurrentProjectSetting": null
}
</file>

<file path=".vs/VSWorkspaceState.json">
{
  "ExpandedNodes": [
    "",
    "\\public",
    "\\public\\src",
    "\\static",
    "\\static\\lib",
    "\\static\\templates",
    "\\static\\templates\\account",
    "\\static\\templates\\admin",
    "\\static\\templates\\admin\\plugins",
    "\\static\\templates\\partials",
    "\\static\\templates\\partials\\sidebar"
  ],
  "PreviewInSolutionExplorer": false
}
</file>

<file path="הוקים">
==== filter:post.create = data

 {
  post: {
    pid: 54,
    uid: 1,
    tid: 8,
    content: '[]�������',
    sourceContent: undefined,
    timestamp: 1751532218903
  },
  data: {
    uuid: '82d2df82-67e5-4083-8c53-c1e999b5248f',
    handle: '',
    title: "'������",
    content: '[]�������',
    thumb: '',
    cid: 1,
    tags: [],
    timestamp: 1751532218903,
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'POST',
      body: [Object],
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/category/1/announcements',
      path: '/category/1/announcements',
      baseUrl: '/api/v3/topics',
      originalUrl: '/api/v3/topics',
      headers: [Object]
    },
    fromQueue: false,
    tid: 8,
    ip: '127.0.0.1',
    isMain: true
  },
  caller: {
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'POST',
      body: [Object],
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/category/1/announcements',
      path: '/category/1/announcements',
      baseUrl: '',
      originalUrl: '/api/v3/topics',
      headers: [Object]
    }
  }
}


==== hooks.on('action:composer.submit', function (data) { = �� ����

{
    "composerEl": {
        "0": {
            "jQuery37105972654509185916": {
                "parentNode": [
                    903,
                    109,
                    true
                ]
            }
        },
        "length": 1,
        "prevObject": {
            "0": {
                "location": {
                    "ancestorOrigins": {},
                    "href": "http://localhost:4567/topic/10/%D7%A4%D7%9D%D7%9F%D7%98%D7%92%D7%93%D7%A9/4?_=1751533319414",
                    "origin": "http://localhost:4567",
                    "protocol": "http:",
                    "host": "localhost:4567",
                    "hostname": "localhost",
                    "port": "4567",
                    "pathname": "/topic/10/%D7%A4%D7%9D%D7%9F%D7%98%D7%92%D7%93%D7%A9/4",
                    "search": "?_=1751533319414",
                    "hash": ""
                },
                "uidEvent": 1,
                "jQuery371059726545091859161": {
                    "events": {
                        "mouseup": [
                            {
                                "type": "mouseup",
                                "origType": "mouseup",
                                "guid": 22,
                                "namespace": ""
                            },
                            {
                                "type": "mouseup",
                                "origType": "mouseup",
                                "guid": 143,
                                "namespace": ""
                            },
                            {
                                "type": "mouseup",
                                "origType": "mouseup",
                                "guid": 164,
                                "namespace": ""
                            }
                        ],
                        "selectionchange": [
                            {
                                "type": "selectionchange",
                                "origType": "selectionchange",
                                "guid": 77,
                                "namespace": ""
                            },
                            {
                                "type": "selectionchange",
                                "origType": "selectionchange",
                                "guid": 78,
                                "namespace": ""
                            }
                        ],
                        "dragend,": [
                            {
                                "type": "dragend,",
                                "origType": "dragend,",
                                "guid": 143,
                                "namespace": ""
                            },
                            {
                                "type": "dragend,",
                                "origType": "dragend,",
                                "guid": 164,
                                "namespace": ""
                            }
                        ],
                        "dragstart": [
                            {
                                "type": "dragstart",
                                "origType": "dragstart",
                                "guid": 163,
                                "namespace": ""
                            }
                        ]
                    },
                    "focusout": 4
                }
            },
            "length": 1
        }
    },
    "action": "posts.reply",
    "composerData": {
        "uuid": "b7fc9458-89c6-43de-8742-6987070ad423",
        "tid": "10",
        "handle": "",
        "content": ",,���������",
        "toPid": null
    },
    "postData": {
        "save_id": "composer:1:1751534920860",
        "action": "posts.reply",
        "tid": "10",
        "toPid": null,
        "title": "�������",
        "body": "",
        "modified": true,
        "isMain": false,
        "category": null,
        "mobile": false,
        "submitted": true
    },
    "redirect": true
}


==={ "hook": "action:user.set"
  ]
}
data: {
  uid: 43,
  field: 'lastonline',
  value: 1752142881950,
  type: 'set',
  caller: {
    uid: 43,
    req: {
      uid: 43,
      params: {},
      method: 'GET',
      body: undefined,
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/topic/3/%D7%9A%D7%9C%D7%97%D7%9A%D7%9A',
      path: '/topic/3/%D7%9A%D7%9C%D7%97%D7%9A%D7%9A',
      baseUrl: '',
      originalUrl: '/topic/3/%D7%9A%D7%9C%D7%97%D7%9A%D7%9A',
      headers: [Object]
    }
  }
}
data: {
  uid: 2,
  field: 'reputation',
  value: 4,
  type: 'increment',
  caller: {
    uid: 43,
    req: {
      uid: 43,
      params: {},
      method: 'PUT',
      body: [Object],
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/topic/3/%D7%9A%D7%9C%D7%97%D7%9A%D7%9A/3',
      path: '/topic/3/%D7%9A%D7%9C%D7%97%D7%9A%D7%9A/3',
      baseUrl: '',
      originalUrl: '/api/v3/posts/36/vote',
      headers: [Object]
    }
  }
}
data: {
  uid: '43',
  field: 'groupTitle',
  value: '["אורחים"]',
  type: 'set',
  caller: {
    uid: 43,
    req: {
      uid: 43,
      params: {},
      method: 'PUT',
      body: undefined,
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/groups/%D7%90%D7%95%D7%A8%D7%97%D7%99%D7%9D',
      path: '/groups/%D7%90%D7%95%D7%A8%D7%97%D7%99%D7%9D',
      baseUrl: '',
      originalUrl: '/api/v3/groups/%D7%90%D7%95%D7%A8%D7%97%D7%99%D7%9D/membership/43',
      headers: [Object]
    }
  }
}

data: {
  uid: '30',
  field: 'banned',
  value: 1,
  type: 'set',
  caller: {
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'PUT',
      body: [Object],
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/user/%D7%AA%D7%AA%D7%AA',
      path: '/user/%D7%AA%D7%AA%D7%AA',
      baseUrl: '',
      originalUrl: '/api/v3/users/30/ban',
      headers: [Object]
    }
  }
}
data: {
  uid: '30',
  field: 'banned:expire',
  value: 1752165597584,
  type: 'set',
  caller: {
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'PUT',
      body: [Object],
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/user/%D7%AA%D7%AA%D7%AA',
      path: '/user/%D7%AA%D7%AA%D7%AA',
      baseUrl: '',
      originalUrl: '/api/v3/users/30/ban',
      headers: [Object]
    }
  }
}


=== action:group.join

data: {
  groupNames: [ 'אורחים' ],
  uid: '43',
  caller: {
    uid: 43,
    req: {
      uid: 43,
      params: {},
      method: 'PUT',
      body: undefined,
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/groups/%D7%90%D7%95%D7%A8%D7%97%D7%99%D7%9D',
      path: '/groups/%D7%90%D7%95%D7%A8%D7%97%D7%99%D7%9D',
      baseUrl: '',
      originalUrl: '/api/v3/groups/%D7%90%D7%95%D7%A8%D7%97%D7%99%D7%9D/membership/43',
      headers: [Object]
    }
  }
}


=== action:user.saveSettings

data: {
  uid: 38,
  settings: {
    postsPerPage: '20',
    topicsPerPage: '20',
    userLang: 'he',
    acpLang: 'he',
    bootswatchSkin: '',
    categoryTopicSort: 'recently_replied',
    categoryWatchState: 'tracking',
    chatAllowList: '[]',
    chatDenyList: '[]',
    dailyDigestFreq: 'off',
    disableIncomingChats: 0,
    followTopicsOnCreate: 0,
    followTopicsOnReply: 0,
    homePageRoute: 'custom',
    openOutgoingLinksInNewTab: 0,
    openSidebars: 'off',
    scrollToMyPost: 1,
    showemail: 0,
    showfullname: 0,
    topicPostSort: 'oldest_to_newest',
    topicSearchEnabled: 0,
    updateUrlWithPostIndex: 1,
    upvoteNotifFreq: 'all',
    usePagination: 0,
    homePageCustom: '',
    notificationType_upvote: 'email',
    'notificationType_new-topic': 'notification',
    'notificationType_new-topic-with-tag': 'notification',
    'notificationType_new-topic-in-category': 'notification',
    'notificationType_new-reply': 'notification',
    'notificationType_post-edit': 'notification',
    notificationType_follow: 'notification',
    'notificationType_new-chat': 'notification',
    'notificationType_new-group-chat': 'notification',
    'notificationType_new-public-chat': 'none',
    'notificationType_group-invite': 'notification',
    'notificationType_group-leave': 'notification',
    'notificationType_group-request-membership': 'notification',
    'notificationType_new-reward': 'none',
    notificationType_mention: 'notification'
  },
  caller: {
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'PUT',
      body: [Object],
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/user/%D7%A2%D7%A1%D7%A7-%D7%91%D7%A2-%D7%9E/settings',
      path: '/user/%D7%A2%D7%A1%D7%A7-%D7%91%D7%A2-%D7%9E/settings',
      baseUrl: '',
      originalUrl: '/api/v3/users/37/settings',
      headers: [Object]
    }
  }
}





data: {
  req: <ref *1> IncomingMessage {
    _events: {
      close: undefined,
      error: undefined,
      data: undefined,
      end: undefined,
      readable: undefined
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 1315596
    },
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      Symbol(async_id_symbol): 5299,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost:4567',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'sec-ch-ua-platform',
      '"Windows"',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua',
      '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'Upgrade-Insecure-Requests',
      '1',
      'sec-ch-ua-mobile',
      '?0',
      'Sec-Fetch-Site',
      'same-origin',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost:4567/user/%D7%A4%D7%A8%D7%95%D7%A4%D7%99%D7%9C-%D7%90%D7%99%D7%A9%D7%99/settings',
      'Accept-Encoding',
      'gzip, deflate, br, zstd',
      'Accept-Language',
      'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      'Cookie',
      'express.sid=s%3AmPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5.kGC%2B%2FZOijacyOV3gL%2FpkXTZeW0%2BHYiVLBtRb%2BZe%2BeCk',
      'If-None-Match',
      'W/"28db6-AwjUIArTjFlJh2hMC5S+CaBFB1w"'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: null,
    aborted: false,
    upgrade: false,
    url: '/recent',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      Symbol(async_id_symbol): 5299,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/recent',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/recent',
      path: '/recent',
      href: '/recent',
      _raw: '/recent'
    },
    params: {},
    query: {},
    res: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *1],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype],
      writeHead: [Function: writeHead],
      end: [Function: end],
      render: [AsyncFunction: renderOverride],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Socket],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    flash: [Function: _flash],
    body: undefined,
    secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
    cookies: {},
    signedCookies: [Object: null prototype] {
      'express.sid': 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5'
    },
    useragent: {
      isYaBrowser: false,
      isAuthoritative: true,
      isMobile: false,
      isMobileNative: false,
      isTablet: false,
      isiPad: false,
      isiPod: false,
      isiPhone: false,
      isiPhoneNative: false,
      isAndroid: false,
      isAndroidNative: false,
      isBlackberry: false,
      isOpera: false,
      isIE: false,
      isEdge: false,
      isIECompatibilityMode: false,
      isSafari: false,
      isFirefox: false,
      isWebkit: false,
      isChrome: true,
      isKonqueror: false,
      isOmniWeb: false,
      isSeaMonkey: false,
      isFlock: false,
      isAmaya: false,
      isPhantomJS: false,
      isEpiphany: false,
      isDesktop: true,
      isWindows: true,
      isLinux: false,
      isLinux64: false,
      isMac: false,
      isChromeOS: false,
      isBada: false,
      isSamsung: false,
      isRaspberry: false,
      isBot: false,
      isCurl: false,
      isAndroidTablet: false,
      isWinJs: false,
      isKindleFire: false,
      isSilk: false,
      isCaptive: false,
      isSmartTV: false,
      isUC: false,
      isFacebook: false,
      isAlamoFire: false,
      isElectron: false,
      silkAccelerated: false,
      browser: 'Chrome',
      version: '138.0.0.0',
      os: 'Windows 10.0',
      platform: 'Microsoft Windows',
      geoIp: {},
      source: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      isWechat: false
    },
    isSpider: [Function: bound isSpider],
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/recent',
      path: '/recent',
      href: '/recent',
      _raw: '/recent'
    },
    sessionStore: MongoStore {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      crypto: null,
      transformFunctions: [Object],
      clientP: [Promise],
      options: [Object],
      collectionP: [Promise],
      generate: [Function (anonymous)],
      Symbol(shapeMode): false,
      Symbol(kCapture): false
    },
    sessionID: 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5',
    session: Session {
      cookie: [Object],
      csrfToken: '09ccdb72fa94be151d2e96bcebc93d67ee697645d6e3aba0dfee30df7442957a636b99824700705895e36334b0707efffffc3f08513b29195b0d5e25594adfcc',
      flash: {},
      passport: [Object],
      meta: [Object],
      tids_viewed: [Object],
      uids_viewed: [Object]
    },
    logIn: [Function (anonymous)],
    login: [Function (anonymous)],
    logOut: [Function (anonymous)],
    logout: [Function (anonymous)],
    isAuthenticated: [Function (anonymous)],
    isUnauthenticated: [Function (anonymous)],
    _sessionManager: SessionManager {
      _key: 'passport',
      _serializeUser: [Function: bound ]
    },
    _passport: { instance: [Authenticator] },
    user: { uid: 1 },
    loggedIn: true,
    uid: 1,
    route: Route { path: '/recent', stack: [Array], methods: [Object] },
    csrfToken: [Function (anonymous)],
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kHeaders): {
      host: 'localhost:4567',
      connection: 'keep-alive',
      'cache-control': 'max-age=0',
      'sec-ch-ua-platform': '"Windows"',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'upgrade-insecure-requests': '1',
      'sec-ch-ua-mobile': '?0',
      'sec-fetch-site': 'same-origin',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost:4567/user/%D7%A4%D7%A8%D7%95%D7%A4%D7%99%D7%9C-%D7%90%D7%99%D7%A9%D7%99/settings',
      'accept-encoding': 'gzip, deflate, br, zstd',
      'accept-language': 'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      cookie: 'express.sid=s%3AmPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5.kGC%2B%2FZOijacyOV3gL%2FpkXTZeW0%2BHYiVLBtRb%2BZe%2BeCk',
      'if-none-match': 'W/"28db6-AwjUIArTjFlJh2hMC5S+CaBFB1w"'
    },
    Symbol(kHeadersCount): 34,
    Symbol(kTrailers): null,
    Symbol(kTrailersCount): 0
  },
  res: <ref *2> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: <ref *1> IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/recent',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '',
      originalUrl: '/recent',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *2],
      flash: [Function: _flash],
      body: undefined,
      secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
      cookies: {},
      signedCookies: [Object: null prototype],
      useragent: [Object],
      isSpider: [Function: bound isSpider],
      _parsedOriginalUrl: [Url],
      sessionStore: [MongoStore],
      sessionID: 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5',
      session: [Session],
      logIn: [Function (anonymous)],
      login: [Function (anonymous)],
      logOut: [Function (anonymous)],
      logout: [Function (anonymous)],
      isAuthenticated: [Function (anonymous)],
      isUnauthenticated: [Function (anonymous)],
      _sessionManager: [SessionManager],
      _passport: [Object],
      user: [Object],
      loggedIn: true,
      uid: 1,
      route: [Route],
      csrfToken: [Function (anonymous)],
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kHeaders): [Object],
      Symbol(kHeadersCount): 34,
      Symbol(kTrailers): null,
      Symbol(kTrailersCount): 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {
      useragent: [Object],
      renderHeader: true,
      isAPI: false,
      config: [Object],
      linkTags: [Array],
      template: 'recent'
    },
    writeHead: [Function: writeHead],
    end: [Function: end],
    render: [AsyncFunction: renderOverride],
    Symbol(shapeMode): false,
    Symbol(kCapture): false,
    Symbol(kBytesWritten): 0,
    Symbol(kNeedDrain): false,
    Symbol(corked): 0,
    Symbol(kChunkedBuffer): [],
    Symbol(kChunkedLength): 0,
    Symbol(kSocket): Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular *2],
      Symbol(async_id_symbol): 5299,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    Symbol(kOutHeaders): [Object: null prototype] {
      'cross-origin-opener-policy': [Array],
      'cross-origin-resource-policy': [Array],
      'origin-agent-cluster': [Array],
      'referrer-policy': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'x-dns-prefetch-control': [Array],
      'x-download-options': [Array],
      'x-frame-options': [Array],
      'x-permitted-cross-domain-policies': [Array],
      'x-xss-protection': [Array],
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'x-upstream-hostname': [Array],
      'cache-control': [Array]
    },
    Symbol(errored): null,
    Symbol(kHighWaterMark): 16384,
    Symbol(kRejectNonStandardBodyWrites): false,
    Symbol(kUniqueHeaders): null
  },
  templateValues: {
    title: 'NodeBB',
    'title:url': '',
    description: '',
    'cache-buster': 'v=0d9950f9a57',
    'brand:logo': '',
    'brand:logo:url': '',
    'brand:logo:alt': '',
    'brand:logo:display': 'hide',
    allowRegistration: true,
    searchEnabled: true,
    postQueueEnabled: false,
    registrationQueueEnabled: false,
    config: {
      relative_path: '',
      upload_url: '/assets/uploads',
      asset_base_url: '/assets',
      assetBaseUrl: '/assets',
      siteTitle: 'NodeBB',
      browserTitle: 'NodeBB',
      description: '',
      keywords: '',
      'brand:logo': '',
      titleLayout: '&#123;pageTitle&#125; | &#123;browserTitle&#125;',
      showSiteTitle: true,
      maintenanceMode: false,
      postQueue: 0,
      minimumTitleLength: 3,
      maximumTitleLength: 255,
      minimumPostLength: 8,
      maximumPostLength: 32767,
      minimumTagsPerTopic: 0,
      maximumTagsPerTopic: 5,
      minimumTagLength: 3,
      maximumTagLength: 15,
      undoTimeout: 10000,
      useOutgoingLinksPage: false,
      outgoingLinksWhitelist: undefined,
      allowGuestHandles: false,
      allowTopicsThumbnail: true,
      usePagination: false,
      disableChat: false,
      disableChatMessageEditing: false,
      maximumChatMessageLength: 1000,
      socketioTransports: [Array],
      socketioOrigins: 'http://localhost:*',
      websocketAddress: '',
      maxReconnectionAttempts: 5,
      reconnectionDelay: 1500,
      topicsPerPage: 20,
      postsPerPage: 20,
      maximumFileSize: 2048,
      'theme:id': 'nodebb-theme-harmony',
      'theme:src': '',
      defaultLang: 'he',
      userLang: 'he',
      loggedIn: true,
      uid: 1,
      'cache-buster': 'v=0d9950f9a57',
      topicPostSort: 'oldest_to_newest',
      categoryTopicSort: 'recently_replied',
      csrf_token: '09ccdb72fa94be151d2e96bcebc93d67ee697645d6e3aba0dfee30df7442957a636b99824700705895e36334b0707efffffc3f08513b29195b0d5e25594adfcc',
      searchEnabled: true,
      searchDefaultInQuick: 'titles',
      bootswatchSkin: '',
      'composer:showHelpTab': true,
      enablePostHistory: true,
      timeagoCutoff: 30,
      timeagoCodes: [Array],
      cookies: [Object],
      thumbs: [Object],
      emailPrompt: 0,
      useragent: [Object],
      fontawesome: [Object],
      activitypub: [Object],
      acpLang: 'he',
      openOutgoingLinksInNewTab: false,
      topicSearchEnabled: false,
      disableCustomUserSkins: false,
      defaultBootswatchSkin: '',
      'composer-default': {},
      theme: [Object],
      openDraftsOnPageLoad: false,
      markdown: [Object],
      emojiCustomFirst: false,
      '2factor': [Object]
    },
    relative_path: '',
    bodyClass: 'page-recent template-recent page-status-200 theme-harmony user-loggedin',
    widgets: { 'sidebar-footer': [Array] },
    configJSON: '{"relative_path":"","upload_url":"/assets/uploads","asset_base_url":"/assets","assetBaseUrl":"/assets","siteTitle":"NodeBB","browserTitle":"NodeBB","description":"","keywords":"","brand:logo":"","titleLayout":"&#123;pageTitle&#125; | &#123;browserTitle&#125;","showSiteTitle":true,"maintenanceMode":false,"postQueue":0,"minimumTitleLength":3,"maximumTitleLength":255,"minimumPostLength":8,"maximumPostLength":32767,"minimumTagsPerTopic":0,"maximumTagsPerTopic":5,"minimumTagLength":3,"maximumTagLength":15,"undoTimeout":10000,"useOutgoingLinksPage":false,"allowGuestHandles":false,"allowTopicsThumbnail":true,"usePagination":false,"disableChat":false,"disableChatMessageEditing":false,"maximumChatMessageLength":1000,"socketioTransports":["polling","websocket"],"socketioOrigins":"http://localhost:*","websocketAddress":"","maxReconnectionAttempts":5,"reconnectionDelay":1500,"topicsPerPage":20,"postsPerPage":20,"maximumFileSize":2048,"theme:id":"nodebb-theme-harmony","theme:src":"","defaultLang":"he","userLang":"he","loggedIn":true,"uid":1,"cache-buster":"v=0d9950f9a57","topicPostSort":"oldest_to_newest","categoryTopicSort":"recently_replied","csrf_token":"09ccdb72fa94be151d2e96bcebc93d67ee697645d6e3aba0dfee30df7442957a636b99824700705895e36334b0707efffffc3f08513b29195b0d5e25594adfcc","searchEnabled":true,"searchDefaultInQuick":"titles","bootswatchSkin":"","composer:showHelpTab":true,"enablePostHistory":true,"timeagoCutoff":30,"timeagoCodes":["af","am","ar","az-short","az","be","bg","bs","ca","cs","cy","da","de-short","de","dv","el","en-short","en","es-short","es","et","eu","fa-short","fa","fi","fr-short","fr","gl","he","hr","hu","hy","id","is","it-short","it","ja","jv","ko","ky","lt","lv","mk","nl","no","pl","pt-br-short","pt-br","pt-short","pt","ro","rs","ru","rw","si","sk","sl","sq","sr","sv","th","tr-short","tr","uk","ur","uz","vi","zh-CN","zh-TW"],"cookies":{"enabled":false,"message":"&lsqb;&lsqb;global:cookies.message&rsqb;&rsqb;","dismiss":"&lsqb;&lsqb;global:cookies.accept&rsqb;&rsqb;","link":"&lsqb;&lsqb;global:cookies.learn-more&rsqb;&rsqb;","link_url":"https:&#x2F;&#x2F;www.cookiesandyou.com"},"thumbs":{"size":512},"emailPrompt":0,"useragent":{"isSafari":false},"fontawesome":{"pro":false,"styles":["solid","brands","regular"],"version":"6.7.2"},"activitypub":{"probe":1},"acpLang":"he","openOutgoingLinksInNewTab":false,"topicSearchEnabled":false,"disableCustomUserSkins":false,"defaultBootswatchSkin":"","composer-default":{},"theme":{"enableQuickReply":true,"enableBreadcrumbs":true,"centerHeaderElements":false,"mobileTopicTeasers":false,"stickyToolbar":true,"topicSidebarTools":true,"topMobilebar":false,"autohideBottombar":true,"openSidebars":false,"chatModals":false},"openDraftsOnPageLoad":false,"markdown":{"highlight":1,"highlightLinesLanguageList":"[]","hljsLanguages":["common"],"theme":"default.css","defaultHighlightLanguage":"","externalMark":false},"emojiCustomFirst":false,"2factor":{"hasKey":false}}',
    bootswatchSkin: '',
    browserTitle: 'נושאים אחרונים | NodeBB',
    navigation: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ],
    unreadCount: {
      topic: 0,
      newTopic: 0,
      watchedTopic: 0,
      unrepliedTopic: 0,
      mobileUnread: 0,
      unreadUrl: '/unread',
      chat: 0,
      notification: 0,
      flags: 0
    },
    isAdmin: true,
    isGlobalMod: false,
    showModMenu: true,
    canChat: true,
    user: {
      uid: 1,
      username: 'ראובן',
      userslug: 'ראובן',
      email: 'R.GOLDMAN7983@gmail.com',
      'email:confirmed': true,
      joindate: 1744276269234,
      lastonline: 1752508014974,
      picture: '',
      'icon:bgColor': '#2196f3',
      fullname: null,
      birthday: null,
      aboutme: null,
      signature: null,
      uploadedpicture: null,
      profileviews: 1,
      reputation: 12,
      postcount: 35,
      topiccount: 11,
      lastposttime: 1751977471449,
      banned: false,
      'banned:expire': 0,
      status: 'online',
      flags: null,
      followerCount: 0,
      followingCount: 0,
      'cover:url': null,
      'cover:position': null,
      groupTitle: '["administrators"]',
      mutedUntil: 0,
      mutedReason: null,
      typeProfile: null,
      isAnon: null,
      uidR: null,
      uidA: null,
      anonIsin: true,
      anonDefault: null,
      displayname: 'ראובן',
      groupTitleArray: [Array],
      'icon:text': 'ר',
      joindateISO: '2025-04-10T09:11:09.234Z',
      lastonlineISO: '2025-07-14T15:46:54.974Z',
      muted: false,
      banned_until: 0,
      banned_until_readable: 'Not Banned',
      isLocal: true,
      unreadData: [Object],
      isAdmin: true,
      isGlobalMod: false,
      isMod: false,
      privileges: [Object],
      blocks: [],
      timeagoCode: 'he',
      online: true,
      lastRoomId: null,
      isEmailConfirmSent: false
    },
    userJSON: '{"uid":1,"username":"\\u05E8\\u05D0\\u05D5\\u05D1\\u05DF","userslug":"\\u05E8\\u05D0\\u05D5\\u05D1\\u05DF","email":"R.GOLDMAN7983@gmail.com","email:confirmed":true,"joindate":1744276269234,"lastonline":1752508014974,"picture":"","icon:bgColor":"#2196f3","fullname":null,"birthday":null,"aboutme":null,"signature":null,"uploadedpicture":null,"profileviews":1,"reputation":12,"postcount":35,"topiccount":11,"lastposttime":1751977471449,"banned":false,"banned:expire":0,"status":"online","flags":null,"followerCount":0,"followingCount":0,"cover:url":null,"cover:position":null,"groupTitle":"[\\\\"administrators\\\\"]","mutedUntil":0,"mutedReason":null,"typeProfile":null,"isAnon":null,"uidR":null,"uidA":null,"anonIsin":true,"anonDefault":null,"displayname":"\\u05E8\\u05D0\\u05D5\\u05D1\\u05DF","groupTitleArray":["administrators"],"icon:text":"\\u05E8","joindateISO":"2025-04-10T09:11:09.234Z","lastonlineISO":"2025-07-14T15:46:54.974Z","muted":false,"banned_until":0,"banned_until_readable":"Not Banned","isLocal":true,"unreadData":{"":{},"new":{},"watched":{},"unreplied":{}},"isAdmin":true,"isGlobalMod":false,"isMod":false,"privileges":{"chat":true,"chat:privileged":true,"upload:post:image":true,"upload:post:file":true,"signature":true,"invite":true,"group:create":true,"search:content":true,"search:users":true,"search:tags":true,"view:users":true,"view:tags":true,"view:groups":true,"local:login":true,"ban":true,"mute":true,"view:users:info":true},"blocks":[],"timeagoCode":"he","online":true,"lastRoomId":null,"isEmailConfirmSent":false}',
    useCustomCSS: undefined,
    customCSS: '',
    useCustomHTML: undefined,
    customHTML: '',
    maintenanceHeader: 0,
    defaultLang: 'he',
    userLang: 'he',
    languageDirection: 'rtl',
    template: { name: 'recent', recent: true },
    metaTags: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ],
    linkTags: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ],
    scripts: [],
    useCustomJS: undefined,
    customJS: '',
    isSpider: false,
    bootswatchSkinOptions: { default: [Array], custom: [], light: [Array], dark: [Array] }
  },
  templateData: {
    title: 'NodeBB',
    'title:url': '',
    description: '',
    'cache-buster': 'v=0d9950f9a57',
    'brand:logo': '',
    'brand:logo:url': '',
    'brand:logo:alt': '',
    'brand:logo:display': 'hide',
    allowRegistration: true,
    searchEnabled: true,
    postQueueEnabled: false,
    registrationQueueEnabled: false,
    config: {
      relative_path: '',
      upload_url: '/assets/uploads',
      asset_base_url: '/assets',
      assetBaseUrl: '/assets',
      siteTitle: 'NodeBB',
      browserTitle: 'NodeBB',
      description: '',
      keywords: '',
      'brand:logo': '',
      titleLayout: '&#123;pageTitle&#125; | &#123;browserTitle&#125;',
      showSiteTitle: true,
      maintenanceMode: false,
      postQueue: 0,
      minimumTitleLength: 3,
      maximumTitleLength: 255,
      minimumPostLength: 8,
      maximumPostLength: 32767,
      minimumTagsPerTopic: 0,
      maximumTagsPerTopic: 5,
      minimumTagLength: 3,
      maximumTagLength: 15,
      undoTimeout: 10000,
      useOutgoingLinksPage: false,
      outgoingLinksWhitelist: undefined,
      allowGuestHandles: false,
      allowTopicsThumbnail: true,
      usePagination: false,
      disableChat: false,
      disableChatMessageEditing: false,
      maximumChatMessageLength: 1000,
      socketioTransports: [Array],
      socketioOrigins: 'http://localhost:*',
      websocketAddress: '',
      maxReconnectionAttempts: 5,
      reconnectionDelay: 1500,
      topicsPerPage: 20,
      postsPerPage: 20,
      maximumFileSize: 2048,
      'theme:id': 'nodebb-theme-harmony',
      'theme:src': '',
      defaultLang: 'he',
      userLang: 'he',
      loggedIn: true,
      uid: 1,
      'cache-buster': 'v=0d9950f9a57',
      topicPostSort: 'oldest_to_newest',
      categoryTopicSort: 'recently_replied',
      csrf_token: '09ccdb72fa94be151d2e96bcebc93d67ee697645d6e3aba0dfee30df7442957a636b99824700705895e36334b0707efffffc3f08513b29195b0d5e25594adfcc',
      searchEnabled: true,
      searchDefaultInQuick: 'titles',
      bootswatchSkin: '',
      'composer:showHelpTab': true,
      enablePostHistory: true,
      timeagoCutoff: 30,
      timeagoCodes: [Array],
      cookies: [Object],
      thumbs: [Object],
      emailPrompt: 0,
      useragent: [Object],
      fontawesome: [Object],
      activitypub: [Object],
      acpLang: 'he',
      openOutgoingLinksInNewTab: false,
      topicSearchEnabled: false,
      disableCustomUserSkins: false,
      defaultBootswatchSkin: '',
      'composer-default': {},
      theme: [Object],
      openDraftsOnPageLoad: false,
      markdown: [Object],
      emojiCustomFirst: false,
      '2factor': [Object]
    },
    relative_path: '',
    bodyClass: 'page-recent template-recent page-status-200 theme-harmony user-loggedin',
    widgets: { 'sidebar-footer': [Array] },
    configJSON: '{"relative_path":"","upload_url":"/assets/uploads","asset_base_url":"/assets","assetBaseUrl":"/assets","siteTitle":"NodeBB","browserTitle":"NodeBB","description":"","keywords":"","brand:logo":"","titleLayout":"&#123;pageTitle&#125; | &#123;browserTitle&#125;","showSiteTitle":true,"maintenanceMode":false,"postQueue":0,"minimumTitleLength":3,"maximumTitleLength":255,"minimumPostLength":8,"maximumPostLength":32767,"minimumTagsPerTopic":0,"maximumTagsPerTopic":5,"minimumTagLength":3,"maximumTagLength":15,"undoTimeout":10000,"useOutgoingLinksPage":false,"allowGuestHandles":false,"allowTopicsThumbnail":true,"usePagination":false,"disableChat":false,"disableChatMessageEditing":false,"maximumChatMessageLength":1000,"socketioTransports":["polling","websocket"],"socketioOrigins":"http://localhost:*","websocketAddress":"","maxReconnectionAttempts":5,"reconnectionDelay":1500,"topicsPerPage":20,"postsPerPage":20,"maximumFileSize":2048,"theme:id":"nodebb-theme-harmony","theme:src":"","defaultLang":"he","userLang":"he","loggedIn":true,"uid":1,"cache-buster":"v=0d9950f9a57","topicPostSort":"oldest_to_newest","categoryTopicSort":"recently_replied","csrf_token":"09ccdb72fa94be151d2e96bcebc93d67ee697645d6e3aba0dfee30df7442957a636b99824700705895e36334b0707efffffc3f08513b29195b0d5e25594adfcc","searchEnabled":true,"searchDefaultInQuick":"titles","bootswatchSkin":"","composer:showHelpTab":true,"enablePostHistory":true,"timeagoCutoff":30,"timeagoCodes":["af","am","ar","az-short","az","be","bg","bs","ca","cs","cy","da","de-short","de","dv","el","en-short","en","es-short","es","et","eu","fa-short","fa","fi","fr-short","fr","gl","he","hr","hu","hy","id","is","it-short","it","ja","jv","ko","ky","lt","lv","mk","nl","no","pl","pt-br-short","pt-br","pt-short","pt","ro","rs","ru","rw","si","sk","sl","sq","sr","sv","th","tr-short","tr","uk","ur","uz","vi","zh-CN","zh-TW"],"cookies":{"enabled":false,"message":"&lsqb;&lsqb;global:cookies.message&rsqb;&rsqb;","dismiss":"&lsqb;&lsqb;global:cookies.accept&rsqb;&rsqb;","link":"&lsqb;&lsqb;global:cookies.learn-more&rsqb;&rsqb;","link_url":"https:&#x2F;&#x2F;www.cookiesandyou.com"},"thumbs":{"size":512},"emailPrompt":0,"useragent":{"isSafari":false},"fontawesome":{"pro":false,"styles":["solid","brands","regular"],"version":"6.7.2"},"activitypub":{"probe":1},"acpLang":"he","openOutgoingLinksInNewTab":false,"topicSearchEnabled":false,"disableCustomUserSkins":false,"defaultBootswatchSkin":"","composer-default":{},"theme":{"enableQuickReply":true,"enableBreadcrumbs":true,"centerHeaderElements":false,"mobileTopicTeasers":false,"stickyToolbar":true,"topicSidebarTools":true,"topMobilebar":false,"autohideBottombar":true,"openSidebars":false,"chatModals":false},"openDraftsOnPageLoad":false,"markdown":{"highlight":1,"highlightLinesLanguageList":"[]","hljsLanguages":["common"],"theme":"default.css","defaultHighlightLanguage":"","externalMark":false},"emojiCustomFirst":false,"2factor":{"hasKey":false}}',
    bootswatchSkin: '',
    browserTitle: 'נושאים אחרונים | NodeBB',
    navigation: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ],
    unreadCount: {
      topic: 0,
      newTopic: 0,
      watchedTopic: 0,
      unrepliedTopic: 0,
      mobileUnread: 0,
      unreadUrl: '/unread',
      chat: 0,
      notification: 0,
      flags: 0
    },
    isAdmin: true,
    isGlobalMod: false,
    showModMenu: true,
    canChat: true,
    user: {
      uid: 1,
      username: 'ראובן',
      userslug: 'ראובן',
      email: 'R.GOLDMAN7983@gmail.com',
      'email:confirmed': true,
      joindate: 1744276269234,
      lastonline: 1752508014974,
      picture: '',
      'icon:bgColor': '#2196f3',
      fullname: null,
      birthday: null,
      aboutme: null,
      signature: null,
      uploadedpicture: null,
      profileviews: 1,
      reputation: 12,
      postcount: 35,
      topiccount: 11,
      lastposttime: 1751977471449,
      banned: false,
      'banned:expire': 0,
      status: 'online',
      flags: null,
      followerCount: 0,
      followingCount: 0,
      'cover:url': null,
      'cover:position': null,
      groupTitle: '["administrators"]',
      mutedUntil: 0,
      mutedReason: null,
      typeProfile: null,
      isAnon: null,
      uidR: null,
      uidA: null,
      anonIsin: true,
      anonDefault: null,
      displayname: 'ראובן',
      groupTitleArray: [Array],
      'icon:text': 'ר',
      joindateISO: '2025-04-10T09:11:09.234Z',
      lastonlineISO: '2025-07-14T15:46:54.974Z',
      muted: false,
      banned_until: 0,
      banned_until_readable: 'Not Banned',
      isLocal: true,
      unreadData: [Object],
      isAdmin: true,
      isGlobalMod: false,
      isMod: false,
      privileges: [Object],
      blocks: [],
      timeagoCode: 'he',
      online: true,
      lastRoomId: null,
      isEmailConfirmSent: false
    },
    userJSON: '{"uid":1,"username":"\\u05E8\\u05D0\\u05D5\\u05D1\\u05DF","userslug":"\\u05E8\\u05D0\\u05D5\\u05D1\\u05DF","email":"R.GOLDMAN7983@gmail.com","email:confirmed":true,"joindate":1744276269234,"lastonline":1752508014974,"picture":"","icon:bgColor":"#2196f3","fullname":null,"birthday":null,"aboutme":null,"signature":null,"uploadedpicture":null,"profileviews":1,"reputation":12,"postcount":35,"topiccount":11,"lastposttime":1751977471449,"banned":false,"banned:expire":0,"status":"online","flags":null,"followerCount":0,"followingCount":0,"cover:url":null,"cover:position":null,"groupTitle":"[\\\\"administrators\\\\"]","mutedUntil":0,"mutedReason":null,"typeProfile":null,"isAnon":null,"uidR":null,"uidA":null,"anonIsin":true,"anonDefault":null,"displayname":"\\u05E8\\u05D0\\u05D5\\u05D1\\u05DF","groupTitleArray":["administrators"],"icon:text":"\\u05E8","joindateISO":"2025-04-10T09:11:09.234Z","lastonlineISO":"2025-07-14T15:46:54.974Z","muted":false,"banned_until":0,"banned_until_readable":"Not Banned","isLocal":true,"unreadData":{"":{},"new":{},"watched":{},"unreplied":{}},"isAdmin":true,"isGlobalMod":false,"isMod":false,"privileges":{"chat":true,"chat:privileged":true,"upload:post:image":true,"upload:post:file":true,"signature":true,"invite":true,"group:create":true,"search:content":true,"search:users":true,"search:tags":true,"view:users":true,"view:tags":true,"view:groups":true,"local:login":true,"ban":true,"mute":true,"view:users:info":true},"blocks":[],"timeagoCode":"he","online":true,"lastRoomId":null,"isEmailConfirmSent":false}',
    useCustomCSS: undefined,
    customCSS: '',
    useCustomHTML: undefined,
    customHTML: '',
    maintenanceHeader: 0,
    defaultLang: 'he',
    userLang: 'he',
    languageDirection: 'rtl',
    template: { name: 'recent', recent: true },
    metaTags: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object]
    ],
    linkTags: [
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object], [Object],
      [Object], [Object]
    ],
    scripts: [],
    useCustomJS: undefined,
    customJS: '',
    isSpider: false,
    bootswatchSkinOptions: { default: [Array], custom: [], light: [Array], dark: [Array] }
  },
  data: {
    nextStart: 20,
    topicCount: 12,
    topics: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ],
    tids: [
       3, 14, 9, 13, 12,
      11, 10, 6,  4,  5,
       2,  1
    ],
    title: '[[pages:recent]]',
    breadcrumbs: [ [Object], [Object] ],
    canPost: true,
    showSelect: true,
    showTopicTools: true,
    allCategoriesUrl: 'recent',
    selectedCategory: null,
    selectedCids: [],
    selectedTag: null,
    selectedTags: [],
    'feeds:disableRSS': 0,
    rssFeedUrl: '/recent.rss?uid=1&token=c0288bb9-d82b-4a4d-bacc-e2d18eedcc53',
    filters: [ [Object], [Object], [Object], [Object] ],
    selectedFilter: {
      name: '[[unread:all-topics]]',
      url: 'recent',
      selected: true,
      filter: '',
      icon: 'fa-book'
    },
    terms: [ [Object], [Object], [Object], [Object] ],
    selectedTerm: {
      name: '[[recent:alltime]]',
      url: 'recent',
      selected: true,
      term: 'alltime'
    },
    pagination: {
      prev: [Object],
      next: [Object],
      first: [Object],
      last: [Object],
      rel: [],
      pages: [],
      currentPage: 1,
      pageCount: 1
    },
    loggedIn: true,
    loggedInUser: {
      uid: 1,
      username: 'ראובן',
      userslug: 'ראובן',
      email: 'R.GOLDMAN7983@gmail.com',
      'email:confirmed': 1,
      joindate: 1744276269234,
      lastonline: 1752508014974,
      picture: '',
      'icon:bgColor': '#2196f3',
      fullname: null,
      birthday: null,
      aboutme: null,
      signature: null,
      uploadedpicture: null,
      profileviews: 1,
      reputation: 12,
      postcount: 35,
      topiccount: 11,
      lastposttime: 1751977471449,
      banned: false,
      'banned:expire': 0,
      status: 'online',
      flags: null,
      followerCount: 0,
      followingCount: 0,
      'cover:url': null,
      'cover:position': null,
      groupTitle: '["administrators"]',
      mutedUntil: 0,
      mutedReason: null,
      typeProfile: null,
      isAnon: null,
      uidR: null,
      uidA: null,
      anonIsin: true,
      anonDefault: null,
      displayname: 'ראובן',
      groupTitleArray: [Array],
      'icon:text': 'ר',
      joindateISO: '2025-04-10T09:11:09.234Z',
      lastonlineISO: '2025-07-14T15:46:54.974Z',
      muted: false,
      banned_until: 0,
      banned_until_readable: 'Not Banned',
      isLocal: true
    },
    relative_path: '',
    template: { name: 'recent', recent: true },
    url: '/recent',
    bodyClass: 'page-recent template-recent page-status-200 theme-harmony user-loggedin',
    _header: { tags: [Object] },
    widgets: { 'sidebar-footer': [Array] },
    _locals: [Object: null prototype] {
      useragent: [Object],
      renderHeader: true,
      isAPI: false,
      config: [Object],
      linkTags: [Array],
      template: 'recent'
    }
  },
  caller: {
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'GET',
      body: undefined,
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/user/%D7%A4%D7%A8%D7%95%D7%A4%D7%99%D7%9C-%D7%90%D7%99%D7%A9%D7%99/settings',
      path: '/user/%D7%A4%D7%A8%D7%95%D7%A4%D7%99%D7%9C-%D7%90%D7%99%D7%A9%D7%99/settings',
      baseUrl: '',
      originalUrl: '/recent',
      headers: [Object]
    }
  }
}


=== filter:middleware.render

data: {
  req: <ref *1> IncomingMessage {
    _events: {
      close: undefined,
      error: undefined,
      data: undefined,
      end: undefined,
      readable: undefined
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 1315596
    },
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      Symbol(async_id_symbol): 3581,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost:4567',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'sec-ch-ua-platform',
      '"Windows"',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua',
      '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'Upgrade-Insecure-Requests',
      '1',
      'sec-ch-ua-mobile',
      '?0',
      'Sec-Fetch-Site',
      'same-origin',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost:4567/admin/advanced/logs',
      'Accept-Encoding',
      'gzip, deflate, br, zstd',
      'Accept-Language',
      'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      'Cookie',
      'express.sid=s%3AmPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5.kGC%2B%2FZOijacyOV3gL%2FpkXTZeW0%2BHYiVLBtRb%2BZe%2BeCk',
      'If-None-Match',
      'W/"48857-v4+Xjzp8j7cxzrtlXd22/j8B6Z4"'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: null,
    aborted: false,
    upgrade: false,
    url: '/admin/advanced/logs',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      Symbol(async_id_symbol): 3581,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/admin/advanced/logs',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/admin/advanced/logs',
      path: '/admin/advanced/logs',
      href: '/admin/advanced/logs',
      _raw: '/admin/advanced/logs'
    },
    params: {},
    query: {},
    res: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *1],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype],
      writeHead: [Function: writeHead],
      end: [Function: end],
      render: [AsyncFunction: renderOverride],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Socket],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    flash: [Function: _flash],
    body: undefined,
    secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
    cookies: {},
    signedCookies: [Object: null prototype] {
      'express.sid': 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5'
    },
    useragent: {
      isYaBrowser: false,
      isAuthoritative: true,
      isMobile: false,
      isMobileNative: false,
      isTablet: false,
      isiPad: false,
      isiPod: false,
      isiPhone: false,
      isiPhoneNative: false,
      isAndroid: false,
      isAndroidNative: false,
      isBlackberry: false,
      isOpera: false,
      isIE: false,
      isEdge: false,
      isIECompatibilityMode: false,
      isSafari: false,
      isFirefox: false,
      isWebkit: false,
      isChrome: true,
      isKonqueror: false,
      isOmniWeb: false,
      isSeaMonkey: false,
      isFlock: false,
      isAmaya: false,
      isPhantomJS: false,
      isEpiphany: false,
      isDesktop: true,
      isWindows: true,
      isLinux: false,
      isLinux64: false,
      isMac: false,
      isChromeOS: false,
      isBada: false,
      isSamsung: false,
      isRaspberry: false,
      isBot: false,
      isCurl: false,
      isAndroidTablet: false,
      isWinJs: false,
      isKindleFire: false,
      isSilk: false,
      isCaptive: false,
      isSmartTV: false,
      isUC: false,
      isFacebook: false,
      isAlamoFire: false,
      isElectron: false,
      silkAccelerated: false,
      browser: 'Chrome',
      version: '138.0.0.0',
      os: 'Windows 10.0',
      platform: 'Microsoft Windows',
      geoIp: {},
      source: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      isWechat: false
    },
    isSpider: [Function: bound isSpider],
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/admin/advanced/logs',
      path: '/admin/advanced/logs',
      href: '/admin/advanced/logs',
      _raw: '/admin/advanced/logs'
    },
    sessionStore: MongoStore {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      crypto: null,
      transformFunctions: [Object],
      clientP: [Promise],
      options: [Object],
      collectionP: [Promise],
      generate: [Function (anonymous)],
      Symbol(shapeMode): false,
      Symbol(kCapture): false
    },
    sessionID: 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5',
    session: Session {
      cookie: [Object],
      csrfToken: '09ccdb72fa94be151d2e96bcebc93d67ee697645d6e3aba0dfee30df7442957a636b99824700705895e36334b0707efffffc3f08513b29195b0d5e25594adfcc',
      flash: {},
      passport: [Object],
      meta: [Object],
      tids_viewed: [Object],
      uids_viewed: [Object]
    },
    logIn: [Function (anonymous)],
    login: [Function (anonymous)],
    logOut: [Function (anonymous)],
    logout: [Function (anonymous)],
    isAuthenticated: [Function (anonymous)],
    isUnauthenticated: [Function (anonymous)],
    _sessionManager: SessionManager {
      _key: 'passport',
      _serializeUser: [Function: bound ]
    },
    _passport: { instance: [Authenticator] },
    user: { uid: 1 },
    loggedIn: true,
    uid: 1,
    route: Route {
      path: '/admin/advanced/logs',
      stack: [Array],
      methods: [Object]
    },
    csrfToken: [Function (anonymous)],
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kHeaders): {
      host: 'localhost:4567',
      connection: 'keep-alive',
      'cache-control': 'max-age=0',
      'sec-ch-ua-platform': '"Windows"',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'upgrade-insecure-requests': '1',
      'sec-ch-ua-mobile': '?0',
      'sec-fetch-site': 'same-origin',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost:4567/admin/advanced/logs',
      'accept-encoding': 'gzip, deflate, br, zstd',
      'accept-language': 'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      cookie: 'express.sid=s%3AmPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5.kGC%2B%2FZOijacyOV3gL%2FpkXTZeW0%2BHYiVLBtRb%2BZe%2BeCk',
      'if-none-match': 'W/"48857-v4+Xjzp8j7cxzrtlXd22/j8B6Z4"'
    },
    Symbol(kHeadersCount): 34,
    Symbol(kTrailers): null,
    Symbol(kTrailersCount): 0
  },
  res: <ref *2> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: <ref *1> IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/admin/advanced/logs',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '',
      originalUrl: '/admin/advanced/logs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *2],
      flash: [Function: _flash],
      body: undefined,
      secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
      cookies: {},
      signedCookies: [Object: null prototype],
      useragent: [Object],
      isSpider: [Function: bound isSpider],
      _parsedOriginalUrl: [Url],
      sessionStore: [MongoStore],
      sessionID: 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5',
      session: [Session],
      logIn: [Function (anonymous)],
      login: [Function (anonymous)],
      logOut: [Function (anonymous)],
      logout: [Function (anonymous)],
      isAuthenticated: [Function (anonymous)],
      isUnauthenticated: [Function (anonymous)],
      _sessionManager: [SessionManager],
      _passport: [Object],
      user: [Object],
      loggedIn: true,
      uid: 1,
      route: [Route],
      csrfToken: [Function (anonymous)],
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kHeaders): [Object],
      Symbol(kHeadersCount): 34,
      Symbol(kTrailers): null,
      Symbol(kTrailersCount): 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {
      useragent: [Object],
      renderAdminHeader: true,
      config: [Object]
    },
    writeHead: [Function: writeHead],
    end: [Function: end],
    render: [AsyncFunction: renderOverride],
    Symbol(shapeMode): false,
    Symbol(kCapture): false,
    Symbol(kBytesWritten): 0,
    Symbol(kNeedDrain): false,
    Symbol(corked): 0,
    Symbol(kChunkedBuffer): [],
    Symbol(kChunkedLength): 0,
    Symbol(kSocket): Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular *2],
      Symbol(async_id_symbol): 3581,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    Symbol(kOutHeaders): [Object: null prototype] {
      'cross-origin-opener-policy': [Array],
      'cross-origin-resource-policy': [Array],
      'origin-agent-cluster': [Array],
      'referrer-policy': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'x-dns-prefetch-control': [Array],
      'x-download-options': [Array],
      'x-frame-options': [Array],
      'x-permitted-cross-domain-policies': [Array],
      'x-xss-protection': [Array],
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'cache-control': [Array]
    },
    Symbol(errored): null,
    Symbol(kHighWaterMark): 16384,
    Symbol(kRejectNonStandardBodyWrites): false,
    Symbol(kUniqueHeaders): null
  },
  templateData: {
    data: '',
    loggedIn: true,
    loggedInUser: {
      uid: 1,
      username: 'ראובן',
      userslug: 'ראובן',
      email: 'R.GOLDMAN7983@gmail.com',
      'email:confirmed': 1,
      joindate: 1744276269234,
      lastonline: 1752567551519,
      picture: '',
      'icon:bgColor': '#2196f3',
      fullname: null,
      birthday: null,
      aboutme: null,
      signature: null,
      uploadedpicture: null,
      profileviews: 1,
      reputation: 12,
      postcount: 35,
      topiccount: 11,
      lastposttime: 1751977471449,
      banned: false,
      'banned:expire': 0,
      status: 'online',
      flags: null,
      followerCount: 0,
      followingCount: 0,
      'cover:url': null,
      'cover:position': null,
      groupTitle: '["administrators"]',
      mutedUntil: 0,
      mutedReason: null,
      typeProfile: null,
      isAnon: null,
      uidR: null,
      uidA: null,
      anonIsin: true,
      anonDefault: null,
      displayname: 'ראובן',
      groupTitleArray: [Array],
      'icon:text': 'ר',
      joindateISO: '2025-04-10T09:11:09.234Z',
      lastonlineISO: '2025-07-15T08:19:11.519Z',
      muted: false,
      banned_until: 0,
      banned_until_readable: 'Not Banned',
      isLocal: true
    },
    relative_path: '',
    template: { name: 'admin/advanced/logs', 'admin/advanced/logs': true },
    url: '/admin/advanced/logs',
    bodyClass: 'page-admin page-admin-advanced page-admin-logs template-admin-advanced-logs page-status-200 theme-harmony user-loggedin'
  },
  caller: {
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'GET',
      body: undefined,
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/admin/advanced/logs',
      path: '/admin/advanced/logs',
      baseUrl: '',
      originalUrl: '/admin/advanced/logs',
      headers: [Object]
    }
  }
}
data: {
  req: <ref *1> IncomingMessage {
    _events: {
      close: undefined,
      error: undefined,
      data: undefined,
      end: undefined,
      readable: undefined
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 1315596
    },
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      timeout: 0,
      Symbol(async_id_symbol): 4582,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 102365,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 6191,
        Symbol(triggerId): 6188,
        Symbol(kAsyncContextFrame): undefined
      },
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost:4567',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'sec-ch-ua-platform',
      '"Windows"',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua',
      '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'Upgrade-Insecure-Requests',
      '1',
      'sec-ch-ua-mobile',
      '?0',
      'Sec-Fetch-Site',
      'same-origin',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost:4567/',
      'Accept-Encoding',
      'gzip, deflate, br, zstd',
      'Accept-Language',
      'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      'Cookie',
      'express.sid=s%3AmPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5.kGC%2B%2FZOijacyOV3gL%2FpkXTZeW0%2BHYiVLBtRb%2BZe%2BeCk',
      'If-None-Match',
      'W/"17775-Uj72wKW3DXcL3BPqsicf9OKIL6k"'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: null,
    aborted: false,
    upgrade: false,
    url: '/categories',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      timeout: 0,
      Symbol(async_id_symbol): 4582,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 102365,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 6191,
        Symbol(triggerId): 6188,
        Symbol(kAsyncContextFrame): undefined
      },
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/categories',
      path: '/categories',
      href: '/categories',
      _raw: '/categories'
    },
    params: {},
    query: [Object: null prototype] {},
    res: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *1],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype],
      writeHead: [Function: writeHead],
      end: [Function: end],
      render: [AsyncFunction: renderOverride],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Socket],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    flash: [Function: _flash],
    body: undefined,
    secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
    cookies: {},
    signedCookies: [Object: null prototype] {
      'express.sid': 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5'
    },
    useragent: {
      isYaBrowser: false,
      isAuthoritative: true,
      isMobile: false,
      isMobileNative: false,
      isTablet: false,
      isiPad: false,
      isiPod: false,
      isiPhone: false,
      isiPhoneNative: false,
      isAndroid: false,
      isAndroidNative: false,
      isBlackberry: false,
      isOpera: false,
      isIE: false,
      isEdge: false,
      isIECompatibilityMode: false,
      isSafari: false,
      isFirefox: false,
      isWebkit: false,
      isChrome: true,
      isKonqueror: false,
      isOmniWeb: false,
      isSeaMonkey: false,
      isFlock: false,
      isAmaya: false,
      isPhantomJS: false,
      isEpiphany: false,
      isDesktop: true,
      isWindows: true,
      isLinux: false,
      isLinux64: false,
      isMac: false,
      isChromeOS: false,
      isBada: false,
      isSamsung: false,
      isRaspberry: false,
      isBot: false,
      isCurl: false,
      isAndroidTablet: false,
      isWinJs: false,
      isKindleFire: false,
      isSilk: false,
      isCaptive: false,
      isSmartTV: false,
      isUC: false,
      isFacebook: false,
      isAlamoFire: false,
      isElectron: false,
      silkAccelerated: false,
      browser: 'Chrome',
      version: '138.0.0.0',
      os: 'Windows 10.0',
      platform: 'Microsoft Windows',
      geoIp: {},
      source: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      isWechat: false
    },
    isSpider: [Function: bound isSpider],
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/',
      path: '/',
      href: '/',
      _raw: '/'
    },
    sessionStore: MongoStore {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      crypto: null,
      transformFunctions: [Object],
      clientP: [Promise],
      options: [Object],
      collectionP: [Promise],
      generate: [Function (anonymous)],
      Symbol(shapeMode): false,
      Symbol(kCapture): false
    },
    sessionID: 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5',
    session: Session {
      cookie: [Object],
      csrfToken: '09ccdb72fa94be151d2e96bcebc93d67ee697645d6e3aba0dfee30df7442957a636b99824700705895e36334b0707efffffc3f08513b29195b0d5e25594adfcc',
      flash: {},
      passport: [Object],
      meta: [Object],
      tids_viewed: [Object],
      uids_viewed: [Object]
    },
    logIn: [Function (anonymous)],
    login: [Function (anonymous)],
    logOut: [Function (anonymous)],
    logout: [Function (anonymous)],
    isAuthenticated: [Function (anonymous)],
    isUnauthenticated: [Function (anonymous)],
    _sessionManager: SessionManager {
      _key: 'passport',
      _serializeUser: [Function: bound ]
    },
    _passport: { instance: [Authenticator] },
    user: { uid: 1 },
    loggedIn: true,
    uid: 1,
    route: Route { path: '/categories', stack: [Array], methods: [Object] },
    csrfToken: [Function (anonymous)],
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kHeaders): {
      host: 'localhost:4567',
      connection: 'keep-alive',
      'cache-control': 'max-age=0',
      'sec-ch-ua-platform': '"Windows"',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'upgrade-insecure-requests': '1',
      'sec-ch-ua-mobile': '?0',
      'sec-fetch-site': 'same-origin',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost:4567/',
      'accept-encoding': 'gzip, deflate, br, zstd',
      'accept-language': 'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      cookie: 'express.sid=s%3AmPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5.kGC%2B%2FZOijacyOV3gL%2FpkXTZeW0%2BHYiVLBtRb%2BZe%2BeCk',
      'if-none-match': 'W/"17775-Uj72wKW3DXcL3BPqsicf9OKIL6k"'
    },
    Symbol(kHeadersCount): 34,
    Symbol(kTrailers): null,
    Symbol(kTrailersCount): 0
  },
  res: <ref *2> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: <ref *1> IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/categories',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '',
      originalUrl: '/',
      _parsedUrl: [Url],
      params: {},
      query: [Object: null prototype] {},
      res: [Circular *2],
      flash: [Function: _flash],
      body: undefined,
      secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
      cookies: {},
      signedCookies: [Object: null prototype],
      useragent: [Object],
      isSpider: [Function: bound isSpider],
      _parsedOriginalUrl: [Url],
      sessionStore: [MongoStore],
      sessionID: 'mPtUXohSp2XXjUYcDfQxPUs5WAUFGaV5',
      session: [Session],
      logIn: [Function (anonymous)],
      login: [Function (anonymous)],
      logOut: [Function (anonymous)],
      logout: [Function (anonymous)],
      isAuthenticated: [Function (anonymous)],
      isUnauthenticated: [Function (anonymous)],
      _sessionManager: [SessionManager],
      _passport: [Object],
      user: [Object],
      loggedIn: true,
      uid: 1,
      route: [Route],
      csrfToken: [Function (anonymous)],
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kHeaders): [Object],
      Symbol(kHeadersCount): 34,
      Symbol(kTrailers): null,
      Symbol(kTrailersCount): 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {
      useragent: [Object],
      renderHeader: true,
      isAPI: false,
      config: [Object],
      metaTags: [Array]
    },
    writeHead: [Function: writeHead],
    end: [Function: end],
    render: [AsyncFunction: renderOverride],
    Symbol(shapeMode): false,
    Symbol(kCapture): false,
    Symbol(kBytesWritten): 0,
    Symbol(kNeedDrain): false,
    Symbol(corked): 0,
    Symbol(kChunkedBuffer): [],
    Symbol(kChunkedLength): 0,
    Symbol(kSocket): Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular *2],
      timeout: 0,
      Symbol(async_id_symbol): 4582,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 102365,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 6191,
        Symbol(triggerId): 6188,
        Symbol(kAsyncContextFrame): undefined
      },
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    Symbol(kOutHeaders): [Object: null prototype] {
      'cross-origin-opener-policy': [Array],
      'cross-origin-resource-policy': [Array],
      'origin-agent-cluster': [Array],
      'referrer-policy': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'x-dns-prefetch-control': [Array],
      'x-download-options': [Array],
      'x-frame-options': [Array],
      'x-permitted-cross-domain-policies': [Array],
      'x-xss-protection': [Array],
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'cache-control': [Array]
    },
    Symbol(errored): null,
    Symbol(kHighWaterMark): 16384,
    Symbol(kRejectNonStandardBodyWrites): false,
    Symbol(kUniqueHeaders): null
  },
  templateData: {
    title: '[[pages:home]]',
    selectCategoryLabel: '[[pages:categories]]',
    categories: [ [Object], [Object], [Object], [Object] ],
    pagination: {
      prev: [Object],
      next: [Object],
      first: [Object],
      last: [Object],
      rel: [],
      pages: [],
      currentPage: 1,
      pageCount: 1
    },
    loggedIn: true,
    loggedInUser: {
      uid: 1,
      username: 'ראובן',
      userslug: 'ראובן',
      email: 'R.GOLDMAN7983@gmail.com',
      'email:confirmed': 1,
      joindate: 1744276269234,
      lastonline: 1752569187201,
      picture: '',
      'icon:bgColor': '#2196f3',
      fullname: null,
      birthday: null,
      aboutme: null,
      signature: null,
      uploadedpicture: null,
      profileviews: 1,
      reputation: 12,
      postcount: 35,
      topiccount: 11,
      lastposttime: 1751977471449,
      banned: false,
      'banned:expire': 0,
      status: 'online',
      flags: null,
      followerCount: 0,
      followingCount: 0,
      'cover:url': null,
      'cover:position': null,
      groupTitle: '["administrators"]',
      mutedUntil: 0,
      mutedReason: null,
      typeProfile: null,
      isAnon: null,
      uidR: null,
      uidA: null,
      anonIsin: true,
      anonDefault: null,
      displayname: 'ראובן',
      groupTitleArray: [Array],
      'icon:text': 'ר',
      joindateISO: '2025-04-10T09:11:09.234Z',
      lastonlineISO: '2025-07-15T08:46:27.201Z',
      muted: false,
      banned_until: 0,
      banned_until_readable: 'Not Banned',
      isLocal: true
    },
    relative_path: '',
    template: { name: 'categories', categories: true },
    url: '/categories',
    bodyClass: 'page-categories template-categories page-status-200 theme-harmony user-loggedin'
  },
  caller: {
    uid: 1,
    req: {
      uid: 1,
      params: {},
      method: 'GET',
      body: undefined,
      session: [Session],
      ip: '127.0.0.1',
      host: 'localhost:4567',
      protocol: 'http',
      secure: false,
      url: 'http://localhost:4567/',
      path: '/',
      baseUrl: '',
      originalUrl: '/',
      headers: [Object]
    }
  }
}


רינדור של תבנית API 
async function renderSwichUser(req, res, next) {

רק: <ref *2> IncomingMessage {
  _events: {
    close: undefined,
    error: undefined,
    data: undefined,
    end: undefined,
    readable: undefined
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    Symbol(kState): 1315596
  },
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17563908,
      Symbol(kBufferedValue): null,
      Symbol(kWriteCbValue): null,
      Symbol(kAfterWriteTickInfoValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:4567',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 3120,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 173950,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 3122,
        Symbol(triggerId): 3121,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:4567',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 3120,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 173950,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 3122,
        Symbol(triggerId): 3121,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 64164 },
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype],
      writeHead: [Function: writeHead],
      end: [Function: end],
      render: [AsyncFunction: renderOverride],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Circular *1],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    timeout: 0,
    Symbol(async_id_symbol): 6784,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *1]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): Timeout {
      _idleTimeout: -1,
      _idlePrev: null,
      _idleNext: null,
      _idleStart: 200220,
      _onTimeout: null,
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: true,
      Symbol(refed): false,
      Symbol(kHasPrimitive): false,
      Symbol(asyncId): 6817,
      Symbol(triggerId): 6814,
      Symbol(kAsyncContextFrame): [AsyncContextFrame [Map]]
    },
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  rawHeaders: [
    'Host',
    'localhost:4567',
    'Connection',
    'keep-alive',
    'Pragma',
    'no-cache',
    'Cache-Control',
    'no-cache',
    'sec-ch-ua-platform',
    '"Windows"',
    'User-Agent',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
    'Accept',
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'sec-ch-ua',
    '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
    'Upgrade-Insecure-Requests',
    '1',
    'sec-ch-ua-mobile',
    '?0',
    'Sec-Fetch-Site',
    'same-origin',
    'Sec-Fetch-Mode',
    'navigate',
    'Sec-Fetch-Dest',
    'empty',
    'Accept-Encoding',
    'gzip, deflate, br, zstd',
    'Accept-Language',
    'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
    'Cookie',
    'express.sid=s%3APRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah.uSX9J5IS4fNgyQspUsG471eyDcEDKNT1gVWB3bTbIlc'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: null,
  aborted: false,
  upgrade: false,
  url: '/api/plugins/anon-profile/swich-user',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17563908,
      Symbol(kBufferedValue): null,
      Symbol(kWriteCbValue): null,
      Symbol(kAfterWriteTickInfoValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:4567',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 3120,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 173950,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 3122,
        Symbol(triggerId): 3121,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:4567',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 3120,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 173950,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 3122,
        Symbol(triggerId): 3121,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 64164 },
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype],
      writeHead: [Function: writeHead],
      end: [Function: end],
      render: [AsyncFunction: renderOverride],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Circular *1],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    timeout: 0,
    Symbol(async_id_symbol): 6784,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *1]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): Timeout {
      _idleTimeout: -1,
      _idlePrev: null,
      _idleNext: null,
      _idleStart: 200220,
      _onTimeout: null,
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: true,
      Symbol(refed): false,
      Symbol(kHasPrimitive): false,
      Symbol(asyncId): 6817,
      Symbol(triggerId): 6814,
      Symbol(kAsyncContextFrame): [AsyncContextFrame [Map]]
    },
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/api/plugins/anon-profile/swich-user',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/api/plugins/anon-profile/swich-user',
    path: '/api/plugins/anon-profile/swich-user',
    href: '/api/plugins/anon-profile/swich-user',
    _raw: '/api/plugins/anon-profile/swich-user'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: [Circular *2],
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] { useragent: [Object], isAPI: true },
    writeHead: [Function: writeHead],
    end: [Function: end],
    render: [AsyncFunction: renderOverride],
    Symbol(shapeMode): false,
    Symbol(kCapture): false,
    Symbol(kBytesWritten): 0,
    Symbol(kNeedDrain): false,
    Symbol(corked): 0,
    Symbol(kChunkedBuffer): [],
    Symbol(kChunkedLength): 0,
    Symbol(kSocket): <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular *3],
      timeout: 0,
      Symbol(async_id_symbol): 6784,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 200220,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 6817,
        Symbol(triggerId): 6814,
        Symbol(kAsyncContextFrame): [AsyncContextFrame [Map]]
      },
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    Symbol(kOutHeaders): [Object: null prototype] {
      'cross-origin-opener-policy': [Array],
      'cross-origin-resource-policy': [Array],
      'origin-agent-cluster': [Array],
      'referrer-policy': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'x-dns-prefetch-control': [Array],
      'x-download-options': [Array],
      'x-frame-options': [Array],
      'x-permitted-cross-domain-policies': [Array],
      'x-xss-protection': [Array],
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'x-upstream-hostname': [Array]
    },
    Symbol(errored): null,
    Symbol(kHighWaterMark): 16384,
    Symbol(kRejectNonStandardBodyWrites): false,
    Symbol(kUniqueHeaders): null
  },
  flash: [Function: _flash],
  body: undefined,
  secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
  cookies: {},
  signedCookies: [Object: null prototype] {
    'express.sid': 'PRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah'
  },
  useragent: {
    isYaBrowser: false,
    isAuthoritative: true,
    isMobile: false,
    isMobileNative: false,
    isTablet: false,
    isiPad: false,
    isiPod: false,
    isiPhone: false,
    isiPhoneNative: false,
    isAndroid: false,
    isAndroidNative: false,
    isBlackberry: false,
    isOpera: false,
    isIE: false,
    isEdge: false,
    isIECompatibilityMode: false,
    isSafari: false,
    isFirefox: false,
    isWebkit: false,
    isChrome: true,
    isKonqueror: false,
    isOmniWeb: false,
    isSeaMonkey: false,
    isFlock: false,
    isAmaya: false,
    isPhantomJS: false,
    isEpiphany: false,
    isDesktop: true,
    isWindows: true,
    isLinux: false,
    isLinux64: false,
    isMac: false,
    isChromeOS: false,
    isBada: false,
    isSamsung: false,
    isRaspberry: false,
    isBot: false,
    isCurl: false,
    isAndroidTablet: false,
    isWinJs: false,
    isKindleFire: false,
    isSilk: false,
    isCaptive: false,
    isSmartTV: false,
    isUC: false,
    isFacebook: false,
    isAlamoFire: false,
    isElectron: false,
    silkAccelerated: false,
    browser: 'Chrome',
    version: '138.0.0.0',
    os: 'Windows 10.0',
    platform: 'Microsoft Windows',
    geoIp: {},
    source: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
    isWechat: false
  },
  isSpider: [Function: bound isSpider],
  _parsedOriginalUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/api/plugins/anon-profile/swich-user',
    path: '/api/plugins/anon-profile/swich-user',
    href: '/api/plugins/anon-profile/swich-user',
    _raw: '/api/plugins/anon-profile/swich-user'
  },
  sessionStore: MongoStore {
    _events: [Object: null prototype] {
      disconnect: [Function: ondisconnect],
      connect: [Function: onconnect]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    crypto: null,
    transformFunctions: {
      serialize: [Function: stringify],
      unserialize: [Function: parse]
    },
    clientP: Promise { [MongoClient] },
    options: {
      collectionName: 'sessions',
      ttl: 1209600,
      mongoOptions: {},
      autoRemove: 'native',
      autoRemoveInterval: 10,
      touchAfter: 0,
      stringify: true,
      crypto: [Object],
      clientPromise: [Promise]
    },
    collectionP: Promise { [Collection] },
    generate: [Function (anonymous)],
    Symbol(shapeMode): false,
    Symbol(kCapture): false
  },
  sessionID: 'PRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah',
  session: Session {
    cookie: {
      path: '/',
      _expires: 2025-07-28T17:30:30.871Z,
      originalMaxAge: 1209600000,
      httpOnly: true,
      sameSite: 'Lax'
    },
    csrfToken: 'a066e609e86a80e99bf57fef143eb1937e1a1935b83c33d734f1efc51798c6318628ad73bde1fe3ae3a2633fcd68cb8c8acc955738647b069cb0cefadade072a',
    flash: {},
    passport: { user: 43 },
    meta: {
      ip: '127.0.0.1',
      uuid: '5d51f375-4a5f-4860-944b-100397b54522',
      datetime: 1752514230868,
      platform: 'Microsoft Windows',
      browser: 'Chrome',
      version: '138.0.0.0'
    }
  },
  logIn: [Function (anonymous)],
  login: [Function (anonymous)],
  logOut: [Function (anonymous)],
  logout: [Function (anonymous)],
  isAuthenticated: [Function (anonymous)],
  isUnauthenticated: [Function (anonymous)],
  _sessionManager: SessionManager {
    _key: 'passport',
    _serializeUser: [Function: bound ]
  },
  _passport: {
    instance: Authenticator {
      _key: 'passport',
      _strategies: [Object],
      _serializers: [Array],
      _deserializers: [Array],
      _infoTransformers: [],
      _framework: [Object],
      _sm: [SessionManager],
      Authenticator: [Function: Authenticator],
      Passport: [Function: Authenticator],
      Strategy: [Function],
      strategies: [Object],
      _userProperty: 'user'
    }
  },
  user: { uid: 43 },
  loggedIn: true,
  uid: 43,
  route: Route {
    path: '/api/plugins/anon-profile/swich-user',
    stack: [ [Layer] ],
    methods: { get: true }
  },
  Symbol(shapeMode): true,
  Symbol(kCapture): false,
  Symbol(kHeaders): {
    host: 'localhost:4567',
    connection: 'keep-alive',
    pragma: 'no-cache',
    'cache-control': 'no-cache',
    'sec-ch-ua-platform': '"Windows"',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
    accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
    'upgrade-insecure-requests': '1',
    'sec-ch-ua-mobile': '?0',
    'sec-fetch-site': 'same-origin',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-dest': 'empty',
    'accept-encoding': 'gzip, deflate, br, zstd',
    'accept-language': 'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
    cookie: 'express.sid=s%3APRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah.uSX9J5IS4fNgyQspUsG471eyDcEDKNT1gVWB3bTbIlc'
  },
  Symbol(kHeadersCount): 32,
  Symbol(kTrailers): null,
  Symbol(kTrailersCount): 0
}
רס: <ref *1> ServerResponse {
  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  maxRequestsOnConnectionReached: false,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  strictContentLength: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  _closed: false,
  _header: null,
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData],
  req: IncomingMessage {
    _events: {
      close: undefined,
      error: undefined,
      data: undefined,
      end: undefined,
      readable: undefined
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 1315596
    },
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular *1],
      timeout: 0,
      Symbol(async_id_symbol): 6784,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 200220,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 6817,
        Symbol(triggerId): 6814,
        Symbol(kAsyncContextFrame): [AsyncContextFrame [Map]]
      },
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost:4567',
      'Connection',
      'keep-alive',
      'Pragma',
      'no-cache',
      'Cache-Control',
      'no-cache',
      'sec-ch-ua-platform',
      '"Windows"',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua',
      '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'Upgrade-Insecure-Requests',
      '1',
      'sec-ch-ua-mobile',
      '?0',
      'Sec-Fetch-Site',
      'same-origin',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-Dest',
      'empty',
      'Accept-Encoding',
      'gzip, deflate, br, zstd',
      'Accept-Language',
      'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      'Cookie',
      'express.sid=s%3APRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah.uSX9J5IS4fNgyQspUsG471eyDcEDKNT1gVWB3bTbIlc'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: null,
    aborted: false,
    upgrade: false,
    url: '/api/plugins/anon-profile/swich-user',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular *1],
      timeout: 0,
      Symbol(async_id_symbol): 6784,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 200220,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 6817,
        Symbol(triggerId): 6814,
        Symbol(kAsyncContextFrame): [AsyncContextFrame [Map]]
      },
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/api/plugins/anon-profile/swich-user',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/api/plugins/anon-profile/swich-user',
      path: '/api/plugins/anon-profile/swich-user',
      href: '/api/plugins/anon-profile/swich-user',
      _raw: '/api/plugins/anon-profile/swich-user'
    },
    params: {},
    query: {},
    res: [Circular *1],
    flash: [Function: _flash],
    body: undefined,
    secret: '62363102-7510-4f6f-b5ab-6e09c51a10a5',
    cookies: {},
    signedCookies: [Object: null prototype] {
      'express.sid': 'PRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah'
    },
    useragent: {
      isYaBrowser: false,
      isAuthoritative: true,
      isMobile: false,
      isMobileNative: false,
      isTablet: false,
      isiPad: false,
      isiPod: false,
      isiPhone: false,
      isiPhoneNative: false,
      isAndroid: false,
      isAndroidNative: false,
      isBlackberry: false,
      isOpera: false,
      isIE: false,
      isEdge: false,
      isIECompatibilityMode: false,
      isSafari: false,
      isFirefox: false,
      isWebkit: false,
      isChrome: true,
      isKonqueror: false,
      isOmniWeb: false,
      isSeaMonkey: false,
      isFlock: false,
      isAmaya: false,
      isPhantomJS: false,
      isEpiphany: false,
      isDesktop: true,
      isWindows: true,
      isLinux: false,
      isLinux64: false,
      isMac: false,
      isChromeOS: false,
      isBada: false,
      isSamsung: false,
      isRaspberry: false,
      isBot: false,
      isCurl: false,
      isAndroidTablet: false,
      isWinJs: false,
      isKindleFire: false,
      isSilk: false,
      isCaptive: false,
      isSmartTV: false,
      isUC: false,
      isFacebook: false,
      isAlamoFire: false,
      isElectron: false,
      silkAccelerated: false,
      browser: 'Chrome',
      version: '138.0.0.0',
      os: 'Windows 10.0',
      platform: 'Microsoft Windows',
      geoIp: {},
      source: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      isWechat: false
    },
    isSpider: [Function: bound isSpider],
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/api/plugins/anon-profile/swich-user',
      path: '/api/plugins/anon-profile/swich-user',
      href: '/api/plugins/anon-profile/swich-user',
      _raw: '/api/plugins/anon-profile/swich-user'
    },
    sessionStore: MongoStore {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      crypto: null,
      transformFunctions: [Object],
      clientP: [Promise],
      options: [Object],
      collectionP: [Promise],
      generate: [Function (anonymous)],
      Symbol(shapeMode): false,
      Symbol(kCapture): false
    },
    sessionID: 'PRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah',
    session: Session {
      cookie: [Object],
      csrfToken: 'a066e609e86a80e99bf57fef143eb1937e1a1935b83c33d734f1efc51798c6318628ad73bde1fe3ae3a2633fcd68cb8c8acc955738647b069cb0cefadade072a',
      flash: {},
      passport: [Object],
      meta: [Object]
    },
    logIn: [Function (anonymous)],
    login: [Function (anonymous)],
    logOut: [Function (anonymous)],
    logout: [Function (anonymous)],
    isAuthenticated: [Function (anonymous)],
    isUnauthenticated: [Function (anonymous)],
    _sessionManager: SessionManager {
      _key: 'passport',
      _serializeUser: [Function: bound ]
    },
    _passport: { instance: [Authenticator] },
    user: { uid: 43 },
    loggedIn: true,
    uid: 43,
    route: Route {
      path: '/api/plugins/anon-profile/swich-user',
      stack: [Array],
      methods: [Object]
    },
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kHeaders): {
      host: 'localhost:4567',
      connection: 'keep-alive',
      pragma: 'no-cache',
      'cache-control': 'no-cache',
      'sec-ch-ua-platform': '"Windows"',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
      'upgrade-insecure-requests': '1',
      'sec-ch-ua-mobile': '?0',
      'sec-fetch-site': 'same-origin',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-dest': 'empty',
      'accept-encoding': 'gzip, deflate, br, zstd',
      'accept-language': 'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
      cookie: 'express.sid=s%3APRG66qEwEB4jMsQm3YMvKW2DoYnDP0Ah.uSX9J5IS4fNgyQspUsG471eyDcEDKNT1gVWB3bTbIlc'
    },
    Symbol(kHeadersCount): 32,
    Symbol(kTrailers): null,
    Symbol(kTrailersCount): 0
  },
  _sent100: false,
  _expect_continue: false,
  _maxRequestsPerSocket: 0,
  locals: [Object: null prototype] {
    useragent: {
      isYaBrowser: false,
      isAuthoritative: true,
      isMobile: false,
      isMobileNative: false,
      isTablet: false,
      isiPad: false,
      isiPod: false,
      isiPhone: false,
      isiPhoneNative: false,
      isAndroid: false,
      isAndroidNative: false,
      isBlackberry: false,
      isOpera: false,
      isIE: false,
      isEdge: false,
      isIECompatibilityMode: false,
      isSafari: false,
      isFirefox: false,
      isWebkit: false,
      isChrome: true,
      isKonqueror: false,
      isOmniWeb: false,
      isSeaMonkey: false,
      isFlock: false,
      isAmaya: false,
      isPhantomJS: false,
      isEpiphany: false,
      isDesktop: true,
      isWindows: true,
      isLinux: false,
      isLinux64: false,
      isMac: false,
      isChromeOS: false,
      isBada: false,
      isSamsung: false,
      isRaspberry: false,
      isBot: false,
      isCurl: false,
      isAndroidTablet: false,
      isWinJs: false,
      isKindleFire: false,
      isSilk: false,
      isCaptive: false,
      isSmartTV: false,
      isUC: false,
      isFacebook: false,
      isAlamoFire: false,
      isElectron: false,
      silkAccelerated: false,
      browser: 'Chrome',
      version: '138.0.0.0',
      os: 'Windows 10.0',
      platform: 'Microsoft Windows',
      geoIp: {},
      source: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
      isWechat: false
    },
    isAPI: true
  },
  writeHead: [Function: writeHead],
  end: [Function: end],
  render: [AsyncFunction: renderOverride],
  Symbol(shapeMode): false,
  Symbol(kCapture): false,
  Symbol(kBytesWritten): 0,
  Symbol(kNeedDrain): false,
  Symbol(corked): 0,
  Symbol(kChunkedBuffer): [],
  Symbol(kChunkedLength): 0,
  Symbol(kSocket): <ref *2> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17563908,
      Symbol(kBufferedValue): null,
      Symbol(kWriteCbValue): null,
      Symbol(kAfterWriteTickInfoValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:4567',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 3120,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 173950,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 3122,
        Symbol(triggerId): 3121,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:4567',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 3120,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 173950,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 3122,
        Symbol(triggerId): 3121,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *2],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 64164 },
    _httpMessage: [Circular *1],
    timeout: 0,
    Symbol(async_id_symbol): 6784,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *2]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): Timeout {
      _idleTimeout: -1,
      _idlePrev: null,
      _idleNext: null,
      _idleStart: 200220,
      _onTimeout: null,
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: true,
      Symbol(refed): false,
      Symbol(kHasPrimitive): false,
      Symbol(asyncId): 6817,
      Symbol(triggerId): 6814,
      Symbol(kAsyncContextFrame): [AsyncContextFrame [Map]]
    },
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  Symbol(kOutHeaders): [Object: null prototype] {
    'cross-origin-opener-policy': [ 'Cross-Origin-Opener-Policy', 'same-origin' ],
    'cross-origin-resource-policy': [ 'Cross-Origin-Resource-Policy', 'same-origin' ],
    'origin-agent-cluster': [ 'Origin-Agent-Cluster', '?1' ],
    'referrer-policy': [ 'Referrer-Policy', 'strict-origin-when-cross-origin' ],
    'strict-transport-security': [
      'Strict-Transport-Security',
      'max-age=15552000; includeSubDomains'
    ],
    'x-content-type-options': [ 'X-Content-Type-Options', 'nosniff' ],
    'x-dns-prefetch-control': [ 'X-DNS-Prefetch-Control', 'off' ],
    'x-download-options': [ 'X-Download-Options', 'noopen' ],
    'x-frame-options': [ 'X-Frame-Options', 'SAMEORIGIN' ],
    'x-permitted-cross-domain-policies': [ 'X-Permitted-Cross-Domain-Policies', 'none' ],
    'x-xss-protection': [ 'X-XSS-Protection', '0' ],
    'x-powered-by': [ 'X-Powered-By', 'NodeBB' ],
    'content-security-policy': [ 'Content-Security-Policy', "frame-ancestors 'self'" ],
    'x-upstream-hostname': [ 'X-Upstream-Hostname', 'DESKTOP-VJSSHDU' ]
  },
  Symbol(errored): null,
  Symbol(kHighWaterMark): 16384,
  Symbol(kRejectNonStandardBodyWrites): false,
  Symbol(kUniqueHeaders): null
}




<!-- IMPORT partials/account/header.tpl -->
  <div class="row"> <!-- כרטיס מרכזי להצגת ההודעה למשתמש -->
    <h1>כבר קיים לך פרופיל אנונימי</h1> <!-- כותרת ראשית -->
    <p>כבר יצרת בעבר משתמש אנונימי בפורום.</p> <!-- טקסט תיאורי -->
    <p>שם המשתמש האנונימי שלך הוא:</p> <!-- הכוונה להצגת השם -->
    <span class="username">{nameAnon}</span> <!-- משתנה תבנית שמוחלף בשם האנונימי -->
  </div>
<!-- IMPORT partials/account/footer.tpl -->
  <style>
    /* גופן ראשי ועדין */
    body {
      margin: 0; /* מאפס מרווחים ברירת מחדל */
      padding: 0;
      font-family: Arial, sans-serif; /* גופן קריא ופשוט */
      background-color: #f7f9fa; /* רקע בהיר ונעים */
      color: #333; /* טקסט בצבע אפור כהה לקריאות גבוהה */
      display: flex; /* מאפשר מרכזי אנכית ואופקית */
      align-items: center;
      justify-content: center;
      height: 100vh; /* גובה מלא של חלון הדפדפן */
    }

    /* מיכל כרטיס מרכזי */
    .card {
      background-color: #ffffff; /* רקע לבן לכרטיס */
      border-radius: 12px; /* פינות מעוגלות ועדינות */
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05); /* צל עדין להטמעה קלילה */
      padding: 24px; /* ריווח פנימי סביב התוכן */
      max-width: 400px; /* רוחב מרבי לכרטיס */
      width: 100%; /* תופס את כל הרוחב האפשרי עד למקסימום */
      text-align: center; /* יישור טקסט למרכז */
    }

    /* כותרת ראשית */
    .card h1 {
      margin-top: 0; /* מסיר מרווח עליון מיותר */
      font-size: 1.5rem; /* גודל גופן מודגש */
      color: #2a5d84; /* צבע ראשי רך */
    }

    /* תיאור המשנה */
    .card p {
      margin: 16px 0; /* ריווח מעל ומתחת */
      line-height: 1.5; /* גובה שורה משופר לקריאות */
    }

    /* תצוגת שם המשתמש האנונימי */
    .username {
      display: inline-block; /* מאפשר עיצוב כבלוק בשורה */
      background-color: #e1f0fb; /* רקע תכלכל עדין */
      color: #1a4f73; /* צבע טקסט תואם */
      padding: 8px 16px; /* ריווח פנימי */
      border-radius: 20px; /* פינות מעוגלות ל"בטון" ידידותי */
      font-weight: bold; /* הדגשה של שם המשתמש */
      font-size: 1rem; /* גודל גופן נוח */
    }
  </style>




          <style>
        .composer-actions-wrapper {
  /* יצירת המסגרת הכחולה העדינה באמצעות צל */
  box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.4);
  
  /* פינות מעוגלות שתואמות לאלמנטים בפנים */
  border-radius: 0.375rem; /* ערך ברירת מחדל של Bootstrap */
  
  /* ריווח פנימי כדי שהאלמנטים לא ייצמדו למסגרת */
  padding: 0.1rem;
  
  /* סידור האלמנטים זה לצד זה עם רווח ביניהם */
  display: flex;
  align-items: center;
  gap: 0.1rem; /* רווח בין קבוצת הבחירה לכפתור השליחה */
  justify-content: space-between; /* ידאג שהכפתורים יהיו בצדדים נפרדים */
  width: 100%;
}

/* התאמה למצב ריחוף (hover) כדי להדגיש יותר */
.composer-actions-wrapper:hover {
    box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.5);
}

/* הסרת המסגרת המקורית מהאלמנט הפנימי אם עדיין קיימת */
.composer-actions-wrapper .anon-options-container {
    border: none !important;
    padding: 0 !important;
}
        </style>
</file>

<file path="index.js">
'use strict';

const Groups = require.main.require('./src/groups');   // מודול לשליפת קבוצות
const Settings = require.main.require('./src/settings'); // מודול לשליפת ושמירת הגדרות
const db = require.main.require('./src/database');
const User = require.main.require('./src/user');
const authentication = require.main.require('./src/controllers/authentication')
const userController = require.main.require('./src/controllers/user')
const meta = require.main.require('./src/meta');
const winston = require.main.require('winston');


const plugin = { };

plugin.init = function (params, callback) {
    const { router, middleware } = params;
    const hostMiddleware = params.middleware;
    const hostHelpers = require.main.require('./src/routes/helpers');
    const accountMiddlewares = [
        middleware.exposeUid,
        middleware.ensureLoggedIn,
        middleware.canViewUsers,
        middleware.checkAccountPermissions,
        middleware.buildAccountData,
    ];

    //console.log("א")
    var app = params.router,
        //middleware = params.middleware,
        controllers = params.controllers;

    //app.get('/admin/plugins/anon-profile', middleware.admin.buildHeader, renderAdmin);
    app.get('/api/plugins/anon-profile/data', renderApiData);
    app.get('/api/plugins/anon-profile/swich-user', renderSwichUser);
    //console.log("ב")
    //app.get('/admin/anon-profile/data', middleware.ensureLoggedIn, middleware.admin.checkPrivileges, getData);
    //console.log("ג")
    //app.get('/api/user/:user/anon-profile', renderAnonProfile);
    hostHelpers.setupAdminPageRoute(router, '/admin/plugins/anon-profile', [hostMiddleware.pluginHooks], renderAdmin);
    hostHelpers.setupPageRoute(router, '/user/:userslug/anon-profile', accountMiddlewares, renderAnonProfile);
    //app.get('/user/:userslug/anon-profile', accountMiddlewares, renderAnonProfile);
    //hostHelpers.setupPageRoute(router, '/user/:userslug/2factor', accountMiddlewares, renderAnonProfile);

    //console.log("ד")
        callback();
};
plugin.addAdminNavigation = function (header, callback) {
    header.plugins.push({
        route: '/plugins/anon-profile',
        icon: 'fa-tint',
        name: 'פרופיל אנונימי'
    });
    callback(null, header);
};

plugin.addProfileLink = async function (menuData) {
    // דוחפים אובייקט קישור חדש למערך
    //const _self = plugin;
    //_self.config = _self.config || {};

    const defaults = {
        minReputation: '10',
        allowedGroups: ['administrators']
    };

    // 3. טוענים את ההגדרות מעודכנות לפני כל פעולה
    const options = await meta.settings.get('anon-profile')

    // 4. ממזגים defaults עם מה שקיבלנו מה־DB
    const config = Object.assign({}, defaults, options);

    // 5. אם allowedGroups עדיין מחרוזת – הופכים למערך
    //if (typeof config.allowedGroups === 'string') {
    //    config.allowedGroups = config.allowedGroups.split(',').map(s => s.trim());
    //};

    if (typeof config.allowedGroups === 'string') {
        try {
            // 1.1. מנסה לפרסר את המחרוזת כ-JSON
            //       לדוגמה: input = '["אורחים", "administrators"]'
            const arr = JSON.parse(config.allowedGroups);
            // 1.2. חוזר עם המערך המפורסם
            config.allowedGroups = arr;
        } catch (err) {
            // 1.3. אם הייתה שגיאה בפרסינג, מפליט לוג ומחזיר מערך ריק
            console.error('שגיאה בפרסינג מחרוזת JSON:', err);
        }
    }

    const uid = menuData.callerUID;
    //console.log('uid', uid);
    const repUid = await User.getUserField(uid, 'reputation');
    const repUidInt = parseInt(repUid, 10) || 0;
    const isMembers = await Groups.isMemberOfGroups(uid, config.allowedGroups);
    const allowUid = isMembers.some(Boolean);
    const privOrBus = await User.getUserField(uid, 'typeProfile');
    //console.log('config', config);
    //console.log('isMember', isMembers);
    //console.log('alowUid', allowUid);
    //console.log('repuid',repUid);
    if (repUidInt >= parseInt(config.minReputation, 10) && allowUid) {
        menuData.links.push({
            id: 'anon-profile',    // מזהה ייחודי של הקישור
            route: 'anon-profile',              // נתיב יחסי, יוביל ל־/user/:userslug/custom
            icon: 'fa-link',              // אייקון FontAwesome להצגה
            name: (privOrBus === "business") ? 'פרופיל אישי' : 'פרופיל עסקי', // הטקסט שיוצג בתפריט
            visibility: {
                self: true,
                other: false,
                moderator: false,
                globalMod: false,
                admin: false,
                canViewInfo: false,
            },
        });
    }
    // ממשיכים לבצע את שאר ההוקים (אין שינויים נוספים)
        return menuData;

};
plugin.addFields = async function (user, data) {
    //console.log("User");
    //console.log(User);
    //console.log("אגגגגגגגגגגגגגגגגגגגגגג");
    //console.log(data);
    //console.log(user);
    if (user.data.isAnon !== undefined) {
        //saveCustomFieldCallback(user.user.uid, 'isAnon', true);
        //console.log("ppppppppppppppppppppppppp");
        await User.setUserField(user.user.uid, 'isAnon', true);
        //console.log(user.data.uidR);
        await User.setUserField(user.user.uid, 'uidR', user.data.uidR);
        await User.setUserField(user.caller.uid, 'uidR', user.data.uidR);
        //console.log("ttttttttttttttttttttttttt" + user.caller.uid);
        await User.setUserField(user.caller.uid, 'uidA', user.user.uid);
        await User.setUserField(user.user.uid, 'uidA', user.user.uid);
        await User.setUserField(user.caller.uid, 'anonIsin', true);
        //אישור אימות מייל
        await user.setUserField(user.user.uid, 'email:confirmed', true);


        //סנכרון מוניטין
        const rep = await User.getUserField(user.caller.uid, 'reputation');
        await User.setUserField(user.user.uid, 'reputation', rep);
        //סנכרון הגדרות
        const settings = await User.getSettings(user.caller.uid);
        console.log('settings:', settings);
        await User.saveSettings(user.user.uid, settings);

        //סנכרון קבוצות
        const userGroupsData = await Groups.getUserGroups([user.caller.uid]);
        const groupNames = userGroupsData.flatMap(groupArray => groupArray.map(group => group.name));
        console.log('groupNames:', groupNames);
        if (groupNames.length) {

            // שלב 3: הוספת המשתמש החדש לכל קבוצה
            // אנו משתמשים ב-Promise.all כדי לבצע את כל בקשות ההצטרפות במקביל לשיפור ביצועים.
            await Groups.join(groupNames, user.user.uid)

            //console.log('groupNames:',groupNames);
            //Groups.join(gr, user.user.uid);
        }
    } else if (user.data.anonIsin !== undefined) {
        await User.setUserField(user.user.uid, 'anonIsin', true);
        //console.log(user.data.uidR);
        await User.setUserField(user.user.uid, 'uidA', user.data.uidA.toString());
        await User.setUserField(user.caller.uid, 'uidA', user.data.uidA.toString());
        //console.log("ttttttttttttttttttttttttt" + user.caller.uid);
        await User.setUserField(user.caller.uid, 'uidR', user.user.uid);
        await User.setUserField(user.user.uid, 'uidR', user.user.uid);
        await User.setUserField(user.caller.uid, 'isAnon', true);

        //אישור אימות מייל
        await user.setUserField(user.user.uid, 'email:confirmed', true);


        //סנכרון מוניטין
        const rep = await User.getUserField(user.caller.uid, 'reputation');
        await User.setUserField(user.user.uid, 'reputation', rep);
        //סנכרון הגדרות
        const settings = await User.getSettings(user.caller.uid);
        console.log('settings:', settings);
        await User.saveSettings(user.user.uid, settings);

        //סנכרון קבוצות
        const userGroupsData = await Groups.getUserGroups([user.caller.uid]);
        const groupNames = userGroupsData.flatMap(groupArray => groupArray.map(group => group.name));
        console.log('groupNames:', groupNames);
        if (groupNames.length) {

            // שלב 3: הוספת המשתמש החדש לכל קבוצה
            // אנו משתמשים ב-Promise.all כדי לבצע את כל בקשות ההצטרפות במקביל לשיפור ביצועים.
            await Groups.join(groupNames, user.user.uid)

            //console.log('groupNames:',groupNames);
            //Groups.join(gr, user.user.uid);
        }

    };
};
plugin.addUserFieldWhite = async({ uids, whitelist }) => {
    whitelist.push('isAnon');
    whitelist.push('uidR');
    whitelist.push('uidA');
    whitelist.push('anonIsin');
    whitelist.push('anonDefault');
    whitelist.push('reputation');

    return { uids, whitelist };
};

plugin.syncRep = async function (data) {
    //console.log('data:',data)
    const uid = data.owner;
    const isAnon = await User.getUserField(uid, 'isAnon');
    const anonIsin = await User.getUserField(uid, 'anonIsin');
    //console.log('isAnon:',isAnon,'anonIsin:',anonIsin, 'uid:',uid)
    if (isAnon) {
        const uidR = await User.getUserField(uid, 'uidR');
        const rep = await User.getUserField(uid, 'reputation');
        await User.setUserField(uidR, 'reputation', rep);
    } else if (anonIsin) {
        const uidA = await User.getUserField(uid, 'uidA');
        const rep = await User.getUserField(uid, 'reputation');
        await User.setUserField(uidA, 'reputation', rep);
    }

};

plugin.onUserJoinedGroup = async function (data) {
    //console.log('data:', data);
    const uid = data.uid;
    const groupNames = data.groupNames;
    const isAnon = await User.getUserField(uid, 'isAnon');
    const anonIsin = await User.getUserField(uid, 'anonIsin');
    if (isAnon) {
        const uidR = await User.getUserField(uid, 'uidR');
        Groups.join(groupNames, uidR)
    } else if (anonIsin) {
        const uidA = await User.getUserField(uid, 'uidA');
        Groups.join(groupNames, uidA)
    }

}

plugin.onUserLeavedGroup = async function (data) {
    //console.log('data:', data);
    const uid = data.uid;
    const groupNames = data.groupNames;
    const isAnon = await User.getUserField(uid, 'isAnon');
    const anonIsin = await User.getUserField(uid, 'anonIsin');
    if (isAnon) {
        const uidR = await User.getUserField(uid, 'uidR');
        Groups.leave(groupNames, uidR)
    } else if (anonIsin) {
        const uidA = await User.getUserField(uid, 'uidA');
        Groups.leave(groupNames, uidA)

    }

}

plugin.syncSettings = async function (data) {
    //console.log('data:', data);
    //console.log('11111:', plugin.isSyncing);

    if (!plugin.isSyncing) {
        const uid = data.uid;
        const settings = data.settings;
        const isAnon = await User.getUserField(uid, 'isAnon');
        const anonIsin = await User.getUserField(uid, 'anonIsin');
        if (isAnon) {
            const uidR = await User.getUserField(uid, 'uidR');
            User.saveSettings(uidR, settings)
            plugin.isSyncing = true;
        } else if (anonIsin) {
            const uidA = await User.getUserField(uid, 'uidA');
            User.saveSettings(uidA, settings)
            plugin.isSyncing = true;
        }
        //console.log('2222222:', plugin.isSyncing);
    } else {
        plugin.isSyncing = false;
        //console.log('33333:', plugin.isSyncing);
    }

}

plugin.addMyButtonToNavigation = async function (data) {
    
    //console.log('data:', data)
    //return data;
    const uid = data.req.uid;
    //console.log('uid:',uid)
    const isAnon = await User.getUserField(uid, 'isAnon');
    const anonIsin = await User.getUserField(uid, 'anonIsin');
    const fieldsToGet = ['uid', 'picture', 'icon:bgColor', 'icon:text', 'username','userslug' ];
    if (isAnon) {
        const uid2 = await User.getUserField(uid, 'uidR');
        const user2 = await User.getUsersFields([uid2], fieldsToGet);; //await userController.getUserDataByUID(uid2, uid2);
        data.templateValues.user2 = user2[0];
        data.templateValues.regOrAnon = true;
        //console.log('user2:', user2)
        //console.log('data:', data)

    } else if (anonIsin) {
        const uid2 = await User.getUserField(uid, 'uidA');
        const user2 = await User.getUsersFields([uid2], fieldsToGet);; //await userController.getUserDataByUID(uid2, uid2);
        data.templateValues.user2 = user2[0];
        data.templateValues.regOrAnon = true;
        //console.log('user2:', user2)
        //console.log('data:', data)
    }
    return data;
}


plugin.checkRegister = function (params, callback) {
    //console.log(",,,,,,,,,,,,");
    callback(null, params);
};
plugin.onPostCreate = async function (post) {
    //console.log('פוסט:', post);
    const isAnon = await User.getUserField(post.caller.uid, 'isAnon');
    const anonIsin = await User.getUserField(post.caller.uid, 'anonIsin');
    const reg = await User.getUserField(post.caller.uid, 'uidR');
    const an = await User.getUserField(post.caller.uid, 'uidA');
    //console.log('post.data.regOrAnon:', post.data.regOrAnon)
    //console.log('isAnon', isAnon)
    //console.log('anonIsin', anonIsin)
    if (isAnon) {
        if (post.data.regOrAnon === 'regular') {
            post.post.uid = reg;
            await User.setUserField(post.caller.uid, 'anonDefault', 'reg');
            await User.setUserField(reg, 'anonDefault', 'reg');
        } else {
            await User.setUserField(post.caller.uid, 'anonDefault', 'anon');
            await User.setUserField(reg, 'anonDefault', 'anon');
        }
    } else if (anonIsin){
        if (post.data.regOrAnon === 'anon') {
            post.post.uid = an;
            await User.setUserField(post.caller.uid, 'anonDefault', 'anon');
            await User.setUserField(an, 'anonDefault', 'anon');
        } else {
            await User.setUserField(post.caller.uid, 'anonDefault', 'reg');
            await User.setUserField(an, 'anonDefault', 'reg');
        }
    }    
    return post;
};
plugin.onUserLoggedIn = function (uid) {
    //console.log(uid);
};
plugin.logTemplateName = function (hookData, callback) {
    // בודק אם שם התבנית קיים
    //console.log(hookData.relative_path);
    //console.log("kkkkkk");
    if (hookData.template) {
        // מדפיס לקונסול את שם התבנית
        //console.log(`שם התבנית: ${hookData.template}`);
    }
    // ממשיך לעיבוד הבא
    callback(null, hookData);
};
plugin.addBtn = function (params, callback) {
    //onsole.log('sss', params)
    callback(null, params);
    // 🟢 שדה נוסף: סוג משתתמש
    const toogleAnon = {
        html: `<style>.action-bar>.composer-discard{order:0!important}.action-bar>.composer-toggle{order:1!important}.action-bar>.btn-group.btn-group-sm{order:2!important}</style><button type="button" class="btn btn-sm btn-outline-secondary composer-toggle" data-bs-toggle="button" aria-pressed="false" autocomplete="off" onclick="this.classList.toggle('active'); this.setAttribute('aria-pressed', this.classList.contains('active'))"><i class="fa fa-toggle-on"></i> <span class="d-none d-md-inline">Toggle</span></button>`
    };

    // 🧩 הוספת השדות לתוך הטופס
    if (params.templateData.regFormEntry && Array.isArray(params.templateData.regFormEntry)) {
        params.templateData.regFormEntry.push(toogleAnon);
    }

    callback(null, params);
};


function saveCustomFieldCallback(uid, fieldName, fieldValue) {
    // uid: מזהה המשתמש
    // fieldName: שם השדה שרוצים לשמור
    // fieldValue: הערך לשמירה (מחרוזת, מספר וכדומה)

    // יוצרים אובייקט עם המפתח ושוויו
    const dataObject = {};
    dataObject[fieldName] = fieldValue;

    // קוראים לפונקציה ומעבירים callback שיקבל (err, result)
    User.setUserFields(uid, dataObject, function (err) {
        if (err) {
            // טיפול בשגיאה במידה והייתה
            console.error(`שגיאה בשמירת השדה ${fieldName} למשתמש ${uid}:`, err);
            return;
        };
        //console.log(`הערך של השדה "${fieldName}" נשמר בהצלחה עבור המשתמש ${uid}`);
    });
};
async function renderAdmin(req, res, next) {
    try {
        const groupData = await Groups.getGroupsFromSet('groups:visible:createtime', 0, -1);
        const allGroups = await Groups.getNonPrivilegeGroups('groups:createtime', 0, -1);
        //console.log('groups', allGroups);
        res.render('admin/plugins/anon-profile', {
            groups: allGroups,
            title: 'פרופיל אנונימי',
            //groups: allGroups,  // כל הקבוצות (gid + name)
            //settings: settings    // ההגדרות השמורות (allowedGroups מחרוזת, minReputation מספר)
            }
        );
    } catch (err) {
        return next(err);
    };
};

async function renderSwichUser(req, res, next) {
    const uid = req.uid;
    //console.log('רק:', req);
    //console.log('רס:', res);
    if (!uid) {
        return res.json({ allowwed: false });
    };

    const isAnon = await User.getUserField(uid, 'isAnon');
    const anonIsin = await User.getUserField(uid, 'anonIsin');
    const userslug = await User.getUserField(uid, 'userslug');
    //console.log('isAnon:', isAnon, 'anonIsin:', anonIsin, 'uid:', uid)
    if (isAnon) {
        const uidR = await User.getUserField(uid, 'uidR');
        const userslug2 = await User.getUserField(uidR, 'userslug');
        await authentication.doLogin(req, uidR);
        return res.json({ allowed: true, userslug: userslug, userslug2: userslug2 });

    } else if (anonIsin) {
        const uidA = await User.getUserField(uid, 'uidA');
        const userslug2 = await User.getUserField(uidA, 'userslug');
        await authentication.doLogin(req, uidA);
        return res.json({ allowed: true, userslug: userslug, userslug2: userslug2 });
    }
    return res.json({ allowed: false });   
}

async function renderApiData(req, res, next) {
    try {
        const uid = req.uid;

        if (!uid) {
            return res.json({ allowedUser: false , anonIsin: false, nameRegular: null, nameAnon: null});
        };


        //const anonIsin = await User.getUserField(uid, 'anonIsin');
        const defaults = {
            minReputation: '10',
            allowedGroups: ['administrators']
        };

        // 3. טוענים את ההגדרות מעודכנות לפני כל פעולה
        const options = await meta.settings.get('anon-profile')

        // 4. ממזגים defaults עם מה שקיבלנו מה־DB
        const config = Object.assign({}, defaults, options);

        if (typeof config.allowedGroups === 'string') {
            try {
                // 1.1. מנסה לפרסר את המחרוזת כ-JSON
                //       לדוגמה: input = '["אורחים", "administrators"]'
                const arr = JSON.parse(config.allowedGroups);
                // 1.2. חוזר עם המערך המפורסם
                config.allowedGroups = arr;
            } catch (err) {
                // 1.3. אם הייתה שגיאה בפרסינג, מפליט לוג ומחזיר מערך ריק
                console.error('שגיאה בפרסינג מחרוזת JSON:', err);
            }
        }
        //console.log('req', req);
        //console.log('uid', uid);
        const repUid = await User.getUserField(uid, 'reputation');
        const repUidInt = parseInt(repUid, 10) || 0;
        const isMembers = await Groups.isMemberOfGroups(uid, config.allowedGroups);
        const allowUid = isMembers.some(Boolean);
        const allow = repUidInt >= parseInt(config.minReputation, 10) && allowUid;
        const anonIsin = await User.getUserField(uid, 'anonIsin');
        const isAnon = await User.getUserField(uid, 'isAnon');
        const uidR = await User.getUserField(uid, 'uidR');
        const uidA = await User.getUserField(uid, 'uidA');
        const nameAnon = await User.getUserField(uidA, 'username');
        const nameRegular = await User.getUserField(uidR, 'username');
        const fieldsToGet = ['uid', 'picture', 'icon:bgColor', 'icon:text', 'username', 'userslug'];
        const userAnon = await User.getUsersFields([uidA], fieldsToGet);
        const userReg = await User.getUsersFields([uidR], fieldsToGet);
        const anonDefault = await User.getUserField(uid, 'anonDefault');

        res.json({
            allowedUser: allow,
            anonIsin: anonIsin,
            isAnon: isAnon,
            nameAnon: nameAnon,
            nameRegular:nameRegular,
            userAnon: userAnon[0],
            userReg: userReg[0],
            anonDefault: anonDefault
        });
    } catch (err) {
        return next(err);
    };

};
function getData(req, res, next) {
    try {
        // נטען את כל הקבוצות
        const allGroups1 = db.getSortedSetRevRange('groups:createtime', 0, -1);
        //console.log(allGroups1)
        fetchGroupNames().then(allGroups => {


            // נטען את כל ההגדרות (אובייקט, או {} אם לא קיים עדיין)
            const settingsWrapper = new Settings('anon-profile-setings', '1.0.0', {
                allowedGroups: '',
                minReputation: 0,
            }, async function () {
                const settings = settingsWrapper.cfg._;

                console.log("ה")
                // נרכיב מערך allowedGroups_asArray מתוך המחרוזת (אם קיימת)
                let allowedArray = [];
                if (settings.allowedGroups) {
                    allowedArray = settings.allowedGroups
                        .split(',')
                        .map(item => item.trim())
                        .filter(item => item.length);
                }

                // נענה JSON שמכיל: כל הקבוצות + מערך של הגדרות
                res.json({
                    groups: allGroups,            // [{ gid: "1", name: "Administrators" }, …]
                    settings: {
                        allowedGroups: allowedArray, // [ "3", "5", … ]
                        minReputation: settings.minReputation || 0
                    }
                });
            });
        });
    } catch (err) {
        return next(err);
    }
    next(null, res);
};


async function renderAnonProfile(req, res)  {
    try {


        const uid = req.uid;
        if (!uid) {
            res.render('account/noAllowed', { title: 'הגישה נדחתה', });
        };

        //const anonIsin = await User.getUserField(uid, 'anonIsin');
        const defaults = {
            minReputation: '10',
            allowedGroups: ['administrators']
        };

        // 3. טוענים את ההגדרות מעודכנות לפני כל פעולה
        const options = await meta.settings.get('anon-profile')

        // 4. ממזגים defaults עם מה שקיבלנו מה־DB
        const config = Object.assign({}, defaults, options);

        if (typeof config.allowedGroups === 'string') {
            try {
                // 1.1. מנסה לפרסר את המחרוזת כ-JSON
                //       לדוגמה: input = '["אורחים", "administrators"]'
                const arr = JSON.parse(config.allowedGroups);
                // 1.2. חוזר עם המערך המפורסם
                config.allowedGroups = arr;
            } catch (err) {
                // 1.3. אם הייתה שגיאה בפרסינג, מפליט לוג ומחזיר מערך ריק
                console.error('שגיאה בפרסינג מחרוזת JSON:', err);
            }
        }
        //console.log('req', req);
        //console.log('uid', uid);
        const repUid = await User.getUserField(uid, 'reputation');
        const repUidInt = parseInt(repUid, 10) || 0;
        const isMembers = await Groups.isMemberOfGroups(uid, config.allowedGroups);
        const allowUid = isMembers.some(Boolean);
        const allow = repUidInt >= parseInt(config.minReputation, 10) && allowUid;
        const uidR = await User.getUserField(uid, 'uidR');
        const uidA = await User.getUserField(uid, 'uidA');
        const anonIsin = await User.getUserField(uid, 'anonIsin');
        const isAnon = await User.getUserField(uid, 'isAnon');
        const nameAnon = await User.getUserField(uidA, 'username');
        const nameRegular = await User.getUserField(uidR, 'username');
        const slugAnon = await User.getUserField(uidA, 'userslug');
        const slugRegular = await User.getUserField(uidR, 'userslug');

        //console.log('config', config);
        //console.log('isMember', isMembers);
        //console.log('alowUid', allowUid);
        //console.log('repuid', repUid);


        if ((anonIsin || isAnon) && allow) {
            const anonOrReg = (anonIsin) ? 'reg' : 'anon';
            const uid2 = (isAnon) ? uidR : uidA;
            const fieldsToGet = ['uid', 'picture', 'icon:bgColor', 'icon:text', 'username', 'userslug'];
            const user2 = await User.getUsersFields([uid2], fieldsToGet);
            //console.log('anonOrReg:', anonOrReg)
            res.render('account/anon-is-in', { user2:user2[0], nameAnon: nameAnon, nameRegular: nameRegular, anonOrReg: anonOrReg, slugAnon:slugAnon, slugRegular:slugRegular, ...res.locals.userData, title: 'פרופיל עסקי/אישי', });
        } else if (allow) {
            const privOrBus = await User.getUserField(uid, 'typeProfile');
            res.render('account/anonymous-create', { privOrBus: privOrBus, ...res.locals.userData, title: 'פרופיל עסקי/אישי', });
        } else {
            res.render('account/noAllowed', { title: 'הגישה נדחתה', });
        };
    } catch (err) {
        //console.log('erore:', err)

    }
};

module.exports = plugin;
</file>

<file path="package.json">
{
    "name": "nodebb-plugin-anonymous-alt",
    "version": "1.0.7",
    "description": "Linked anonymous profiles with custom name & avatar",
    "main": "index.js",
    "author": "Your Name",
    "license": "MIT",
    "dependencies": {
        "connect-multiparty": "^2.2.0",
        "validator": "^13.7.0"
    },
    "nbbpm": {
        "compatibility": "^4.0.0"
    }
}
</file>

<file path="plugin.json">
{
    "id": "nodebb-plugin-anonymous-alt",
    "name": "Anonymous Alt Profile",
    "description": "Linked anonymous profiles with custom name & avatar, synced reputation/groups",
    "url": "https://github.com/yourname/nodebb-plugin-anonymous-alt",
    "library": "index.js",
    "staticDirs": {
        "static": "static"
    },

    "settingsRoute": "/admin/plugins/anon-profile",
    "templates": "static/templates",
    "modules": {
        "../admin/plugins/anon-profile.js": "./static/lib/admin.js",
        "../composer.js": "./static/lib/client.js",
        "../client/account/anon-is-in.js": "./static/lib/account/anon-is-in.js",
        "../client/account/anonymous-create.js": "./static/lib/account/anonymous-create.js"
    },
    "hooks": [
        {
            "hook": "static:app.load",
            "method": "init"
        },
        {
            "hook": "filter:admin.header.build",
            "method": "addAdminNavigation"
        },
        {
            "hook": "action:user.create",
            "method": "addFields"
        },
        {
            "hook": "filter:user.whitelistFields",
            "method": "addUserFieldWhite"
        },
        {
            "hook": "filter:post.create",
            "method": "onPostCreate"
        },
        {
            "hook": "filter:user.profileMenu",
            "method": "addProfileLink"
        },
        {
            "hook": "filter:register.check",
            "method": "checkRegister"
        },
        {
            "hook": "action:post.upvote",
            "method": "syncRep"
        },
        {
            "hook": "action:post.downvote",
            "method": "syncRep"
        },
        {
            "hook": "action:post.unvote",
            "method": "syncRep"
        },
        {
            "hook": "action:group.join",
            "method": "onUserJoinedGroup"
        },
        {
            "hook": "action:group.leave",
            "method": "onUserLeavedGroup"
        },
        {
            "hook": "action:user.saveSettings",
            "method": "syncSettings"
        },
        {
            "hook": "filter:middleware.renderFooter",
            "method": "addMyButtonToNavigation"
        }
    ],
    "scripts": [
        "static/lib/client.js"
    ]
}
</file>

<file path="static/lib/admin.js">
'use strict';

// מגדירים את מודול הניהול של התוסף בשם 'admin/plugins/anonymous-plugin'
// תלות ב־Settings (לטעינה/שמירה) ו־alerts (להצגת התראות)
define('admin/plugins/anon-profile', ['settings', 'alerts'], function (Settings, alerts) {

    const AnonymousProfile = {};
    // הפונקציה שתופעל כאשר נכנסים לדף הניהול של התוסף
    AnonymousProfile.init = function () {
        // כאשר הדף נטען – נטען קודם את כל הנתונים (קבוצות + הגדרות) מ־API

        Settings.load('anon-profile', $('.anon-profile-settings'), function (err, settings) {
            if (err) {
                settings = {};
            }

            var defaults = {
                minReputation: 10,
                allowedGroups: ['administrators']
            };

            // Set defaults
            for (var setting in defaults) {
                if (!settings.hasOwnProperty(setting)) {
                    if (typeof defaults[setting] === 'boolean') {
                        $('#' + setting).prop('checked', defaults[setting]);

                    } else {
                        $('#' + setting).val(defaults[setting]);
                    }
                }
                console.log(setting);
            }
        });

        $('#save').on('click', function () {
            Settings.save('anon-profile', $('.anon-profile-settings'), function () {
                alerts.alert({
                    type: 'success',
                    alert_id: 'anon-profile-saved',
                    title: 'ההגדרות נשמרו',
                    message: '',
                    timeout: 5000,
                });
            });
        });
    };


    return AnonymousProfile;
});
</file>

<file path="static/lib/client.js">
'use strict';
require(['hooks', 'jquery', 'app', 'alerts'], function (hooks, $, app, alerts) {


    $(document).on('click', '#user-switch-button', async function (event) {
        // 1. מנע את הפעולה הדיפולטיבית של הקישור (ניווט)
        event.preventDefault();
        try {
            const response = await fetch('/api/plugins/anon-profile/swich-user');
            if (!response.ok) {
                throw new Error('Failed to fetch switch user');
            };
            const data = await response.json();
            if (data.allowed) {
                alerts.alert({
                    type: 'success',
                    title: 'ההחלפה הצליחה',
                    message: 'הדף יטען מחדש בעוד רגע...',
                    timeout: 1500,
                });
                setTimeout(() => {
                    // 1. הגדר את הביטוי הרגולרי
                    // הביטוי שלך מצוין, הוא תופס גם נתיבים כמו /user/slug וגם /user/slug/posts
                    const userProfileRegex = /^\/user\/([^\/]+)(\/.*)?$/;

                    // 2. בצע התאמה מול הנתיב הנוכחי
                    const currentPath = window.location.pathname;
                    const match = currentPath.match(userProfileRegex);

                    // ▼▼▼ התיקון הקריטי מתחיל כאן ▼▼▼

                    // 3. בדוק אם הייתה התאמה (כלומר, match אינו null)
                    if (match) {
                        // אם אנחנו כאן, אנחנו יודעים בביטחון שאנחנו בדף משתמש
                        // ושאפשר לגשת ל-match[1]

                        // 4. פענח את הסלוג מה-URL
                        const slugFromUrl = decodeURIComponent(match[1]);

                        // 5. בצע את ההשוואה הבטוחה
                        if (slugFromUrl === data.userslug) {
                            // אנחנו נמצאים בדף של המשתמש שהרגע הוחלף.
                            // נווט לדף של המשתמש השני עם רענון מלא.
                            const destinationSlug = encodeURIComponent(data.userslug2);
                            const destinationUrl = `/user/${destinationSlug}`;
                            window.location.href = destinationUrl;
                        } else {
                            // אנחנו נמצאים בדף משתמש, אבל לא של המשתמש שהוחלף.
                            // במקרה כזה, פשוט נרענן את הדף הנוכחי.
                            window.location.reload();
                        }
                    } else {
                        // 6. אם אין התאמה ל-Regex כלל (אנחנו בדף הבית, recent, וכו')
                        // פשוט בצע רענון של הדף הנוכחי.
                        window.location.reload();
                    }
                    // ▲▲▲ התיקון מסתיים כאן ▲▲▲

                }, 1500);                //setTimeout(() => window.location.reload(), 1500);
            } else {
                alerts.alert({
                    type: 'danger',
                    title: 'שגיאה',
                    message: 'נכשל ניסיון החלפת משתמש <br> ניתן להחליף ידנית או לנסות שוב מאוחר יותר.',
                    timeout: 2000,
                });

            }
        } catch (err) {
            console.error('Failed to send switch user request:', err);
            alerts.alert({ type: 'danger', title: 'שגיאה', message: 'נכשל ניסיון החלפת משתמש. <br> ניתן להחליף ידנית או לנסות שוב מאוחר יותר.', timeout: 2000, });
        }
    });

    hooks.on('action:composer.loaded', function (data) {
        // 'data.composerEl' הוא אובייקט jQuery של הקומפוזר שזה עתה נטען.
        // זה מבטיח שאנחנו עובדים רק על הקומפוזר הנכון.
        //console.log('deta:', data);
        const $composer = data.composerEl;

        // מצא את האלמנט הבעייתי בתוך הקומפוזר הספציפי הזה
        const $heightContainer = $composer.find('.p-2.d-flex.flex-column.gap-1.h-100');

        // אם האלמנט נמצא...
        if ($heightContainer.length) {
            //console.log('ffffffffffff')
            // הסר את הקלאס הבעייתי שדורש 100% גובה
            $heightContainer.removeClass('h-100');

            // קבע את הגובה ל'auto'. זה יאפשר לאלמנט להתאים את עצמו
            // לתוכן שבו, ויפתור את בעיית ההתנפחות.
            $heightContainer.css('height', 'auto');
        }
        //return data;
    });


    hooks.on('filter:composer.create', async function (data) {
        try {

            const response = await fetch('/api/plugins/anon-profile/data'); // <-- השתמש באותה כתובת שהגדרת ב-plugin.json

            if (!response.ok) {
            // זורקים שגיאה כדי לעבור לבלוק ה-catch
                throw new Error('Failed to fetch anon profile data');
            };


        // (2) ממתינים לפענוח ה-JSON
            const apiData = await response.json();
            data.createData.privileges.anon = apiData.allowedUser;
            data.createData.anonIsin = apiData.anonIsin;
            data.createData.isAnon = apiData.isAnon;
            data.createData.nameRegular = apiData.nameRegular;
            data.createData.nameAnon = apiData.nameAnon;
            data.createData.userAnon = apiData.userAnon;
            data.createData.userReg = apiData.userReg;
            data.createData.anonDefault = apiData.anonDefault;
            //console.log(data);

        
    
        } catch (error) {

            // אם משהו נכשל בדרך, נדפיס שגיאה לקונסול
            console.error('Error fetching plugin data:', error);
            return data;

        }        

        //data.createData.user = app.user
        return data;
        
        
    });
    hooks.on('action:composer.submit', function (data) {

        //console.log('data:', data);

        // 1. מצא את כפתור הרדיו המסומן עם השם 'anon' בכל הדף
        //const $selectedOption = $('input[name="anon"]:checked');

        // משתנה שיחזיק את הבחירה של המשתמש
        let postType = 'regular'; // ערך ברירת מחדל למקרה שלא נמצאה בחירה

        // 2. בדוק אם נמצא כפתור מסומן
        //if ($selectedOption.length > 0) {
        // 3. קרא את הערך שלו ('anon' או 'regular') והכנס למשתנה
        const $anon = data.composerEl.find('input[name="anon"]:checked');
        if ($anon.length) {
            postType = $anon.val(); //$selectedOption.val();
        };
        //}
        //console.log('sssssssss',$selectedOption.val())
        //console.log('סוג הפוסט שנבחר:', postType);

        // 4. הוסף את הערך לנתונים שיישלחו לשרת
        // כאן, נשתמש ישירות במחרוזת שקיבלנו

        data.composerData.regOrAnon = postType;
    });

    function fixComposerHeight() {
        // מצא את כל הקומפוזרים הפתוחים בדף
        const composers = document.querySelectorAll('div[component="composer"]');

        composers.forEach(composer => {
            // בתוך כל קומפוזר, מצא את האלמנט הספציפי שאחראי על הגובה
            const heightContainer = composer.querySelector('.p-2.d-flex.flex-column.gap-1.h-100');

            // ודא שהאלמנט נמצא ושהוא עדיין עם הקלאס h-100 (כדי לא לדרוס שינויים אחרים)
            if (heightContainer && heightContainer.classList.contains('h-100')) {
                // הסר את הקלאס h-100 שדורש 100% גובה
                heightContainer.classList.remove('h-100');

                // קבע גובה מפורש באמצעות style. 
                // 10% זה מעט מדי, ערך כמו 'auto' או חישוב דינמי יהיה טוב יותר.
                // נתחיל עם 'auto' שיתאים את עצמו לתוכן.
                heightContainer.style.height = 'auto';

                // אם תרצה בכל זאת אחוזים, תצטרך לוודא שלאב יש גובה מוגדר.
                // לדוגמה, אם האב הוא 400px, 10% יהיו 40px בלבד.
                // heightContainer.style.height = '10%'; // אפשרות פחות מומלצת

                //console.log('Composer height fixed for:', composer);
            }
        });
    };
});
</file>

<file path="static/templates/account/anon-is-in.tpl">
<!-- IMPORT partials/account/header.tpl -->

<style>
    /* מיכל כרטיס מותאם אישית במרכז הדף */
    .card-custom-anon {
      background-color: #ffffff;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      padding: 32px;
      margin-top: 2rem;
      text-align: center;
    }

    /* כותרת ראשית בכרטיס */
    .card-custom-anon h1 {
      margin-top: 0;
      font-size: 1.75rem;
      font-weight: 600;
      color: #2a5d84;
    }

    /* טקסט תיאורי בכרטיס */
    .card-custom-anon p {
      margin: 16px 0;
      line-height: 1.6;
      font-size: 1.1rem;
      color: #555;
    }

    /* עיצוב ייחודי לתצוגת שם המשתמש (זה החלק שהיה חסר לך) */
    .username-kayam {
      display: inline-block;
      background-color: #e1f0fb;
      color: #1a4f73;
      padding: 10px 20px;
      border-radius: 25px;
      font-weight: bold;
      font-size: 1.2rem;
      margin-top: 10px;
    }
</style>

<div class="row">
    <div class="col-md-8 offset-md-2">
        <div class="card-custom-anon">
            {{{ if (anonOrReg == "reg") }}}
                <h1>כבר קיים לך פרופיל אישי</h1>
                <p>כבר יצרת בעבר משתמש אישי בפורום.</p>
                    <p>למעבר לעריכת המשתמש האישי שלך:</p>
                <div class="username-kayam">
                    <a id="user-switch-button" class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="#" role="menuitem">
			            {buildAvatar(user2, "20px", true)}
			            <span>{user2.username}</span>
		            </a>

                </div>
            {{{ end }}}

            {{{ if (anonOrReg == "anon") }}}
                <h1>כבר קיים לך פרופיל עסקי</h1>
                <p>כבר יצרת בעבר משתמש עסקי בפורום.</p>
                <p>למעבר לעריכת המשתמש העסקי שלך:</p>
                <div class="username-kayam">
                    <a id="user-switch-button" class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="#" role="menuitem">
			            {buildAvatar(user2, "20px", true)}
			            <span>{user2.username}</span>
		            </a>

                </div>
            {{{ end }}}
        </div>
    </div>
</div>

<!-- IMPORT partials/account/footer.tpl -->
</file>

<file path="static/templates/account/anonymous-create.tpl">
<!-- IMPORT partials/account/header.tpl -->
{{{ if (privOrBus == "business")}}}
    <h2 class="tracking-tight fw-semibold text-center">הוספת פרופיל אישי</h2>
{{{ else }}}
    <h2 class="tracking-tight fw-semibold text-center">הוספת פרופיל עסקי</h2>
{{{ end }}}

<div class="row justify-content-center gap-5">
    <div class="col-12 col-md-5 col-lg-3 px-md-0">
        <div class="register-block">
            <form component="register/local" class="d-flex flex-column gap-3" role="form" action="{config.relative_path}/register" method="post">

                <div class="mb-2 d-flex flex-column gap-2">
                    <label for="username">
                        {{{ if (privOrBus == "business")}}}הכנס שם משתמש לפרופיל האישי{{{ else }}}הכנס שם משתמש לפרופיל העסקי{{{ end }}}
                    </label>
                    <div class="d-flex flex-column">
                        <input class="form-control" type="text" placeholder="{{{ if (privOrBus == "business")}}}שם משתמש אישי{{{ else }}}שם משתמש עסקי{{{ end }}}" name="username" id="username" autocorrect="off" autocapitalize="off" autocomplete="nickname" aria-required="true" aria-describedby="username-notify"/>
                        <span class="register-feedback text-xs text-danger" id="username-notify" aria-live="polite"></span>
                        <span class="form-text text-xs">
                            שם משתמש ייחודי בין {minimumUsernameLength} ל {maximumUsernameLength} תווים. משתמשים אחרים יכולים לציין את השם {{{ if (privOrBus == "business")}}}האישי{{{ else }}}העסקי{{{ end }}} שלכם באמצעות @<span id='yourUsername'>שם המשתמש שלכם</span>
                        </span>
                    </div>
                </div>

                <div class="mb-2 d-flex flex-column gap-2">
                    <label for="password">
                        {{{ if (privOrBus == "business")}}}סיסמה (ניתן לבחור בסיסמה הרגילה שלך, או באחרת){{{ else }}}סיסמה (ניתן לבחור באותה הסיסמה של הפרופיל השני שלך, או באחרת){{{ end }}}
                    </label>
                    <div class="d-flex flex-column">
                        <input class="form-control" type="password" placeholder="{{{ if (privOrBus == "business")}}}הקלד סיסמה לפרופיל האישי{{{ else }}}הקלד סיסמה לפרופיל העסקי{{{ end }}}" name="password" id="password" autocomplete="new-password" autocapitalize="off" aria-required="true" aria-describedby="password-notify"/>
                        <span class="register-feedback text-xs text-danger" id="password-notify" aria-live="polite"></span>
                        <span class="form-text text-xs">הסיסמה חייבת להיות לפחות באורך של {minimumPasswordLength} תווים</span>
                        <p id="caps-lock-warning" class="text-danger hidden">
                            <i class="fa fa-exclamation-triangle"></i> [[login:caps-lock-enabled]]
                        </p>
                    </div>
                </div>

                <div class="mb-2 d-flex flex-column gap-2">
                    <label for="password-confirm">אימות סיסמה</label>
                    <div>
                        <input class="form-control" type="password" placeholder="הקלד שנית את הסיסמה" name="password-confirm" id="password-confirm" autocomplete="new-password" autocapitalize="off" aria-required="true" aria-describedby="password-confirm-notify"/>
                        <span class="register-feedback text-xs text-danger" id="password-confirm-notify" aria-live="polite"></span>
                    </div>
                </div>
                
                {{{ if (privOrBus == "business") }}}
                    <input type="hidden" name="isAnon" value="true"/>
                    <input type="hidden" name="uidR" value="{{loggedInUser.uid}}"/>
                    <input type="hidden" name="typeProfile" value="private">
                {{{ else }}}
                    <input type="hidden" name="anonIsin" value="true"/>
                    <input type="hidden" name="uidA" value="{{loggedInUser.uid}}"/>
                    <input type="hidden" name="typeProfile" value="business">
                {{{ end }}}

                {{{ each regFormEntry }}}
                <div class="mb-2 regFormEntry d-flex flex-column gap-2 {./styleName}">
                    <label for="{./inputId}">{./label}</label>
                    <div>{{./html}}</div>
                </div>
                {{{ end }}}
                
                <button class="btn btn-primary" id="register" type="submit">
                    {{{ if (privOrBus == "business")}}}הוסף עכשיו את הפרופיל האישי שלך{{{ else }}}הוסף עכשיו את הפרופיל העסקי שלך{{{ end }}}
                </button>

                <div class="alert alert-danger{{{ if !error }}} hidden{{{ end }}}" id="register-error-notify" role="alert" aria-atomic="true">
                    <strong>[[error:registration-error]]</strong>
                    <p class="mb-0">{error}</p>
                </div>

                <hr/>
                
                <input id="token" type="hidden" name="token" value="" />
                <input id="noscript" type="hidden" name="noscript" value="true" />
                <input type="hidden" name="_csrf" value="{config.csrf_token}" />

            </form>
        </div>
    </div>
</div>
<!-- IMPORT partials/account/footer.tpl -->
</file>

<file path="static/templates/account/noAllowed.tpl">
<div class="flex-fill">
	<h2 class="fw-semibold tracking-tight text-center">[[global:403.title]]</h2>

	<div class="mx-auto">
		<div class="d-flex flex-column gap-3 justify-content-center text-center">
			<div class="mx-auto p-4 bg-light border rounded">
				<i class="text-secondary fa fa-fw fa-4x fa-key"></i>
			</div>
			{{{ if error }}}{error}{{{ else }}}[[global:403.message]]{{{ end }}}
			{{{ if !loggedIn }}}
			[[global:403.login, {config.relative_path}]]
			{{{ end }}}
		</div>
	</div>
</div>
</file>

<file path="static/templates/admin/plugins/anon-profile.tpl">
<div class="acp-page-container">
    <!-- IMPORT admin/partials/settings/header.tpl -->
	<div class="row m-0">
		<div id="spy-container" class="col-12 col-md-8 px-0 mb-4" tabindex="0">
      <form class="form anon-profile-settings">
        <div class="form-group">
          <label class="col-sm-4 control-label">קבוצות מורשות</label>
          <div class="col-sm-7" id="groups-container">
		    <div class="mb-3">
			    <label class="form-label" for="allowedGroups">בחר את הקבוצות המורשות ליצירת פרופיל אנונימי</label>
                    <p>ניתן לבחור כמה קבוצות ע"י החזקת מקש קונטרול לחוץ תוך כדי בחירה</p>
			        <select class="form-select" id="allowedGroups" name="allowedGroups" multiple>
					    <!-- BEGIN groups -->
						    <option value="{groups.displayName}">{groups.displayName}</option>
					    <!-- END groups -->
				    </select>
		    </div>
          </div>
        </div>

        <div class="form-group">
          <label class="col-sm-4 control-label">מוניטין מינימלי</label>
          <div class="col-sm-7">
            <input
              type="number"
              name="minReputation"
              class="form-control"
              id="minReputation-input"
              value="0"
              min="0" 
            >
          </div>
        </div>
      </form>
      </div>
    <!-- IMPORT admin/partials/settings/toc.tpl -->
    </div>
</div>
</file>

<file path="static/templates/composer.tpl">
<div component="composer" class="composer {{{ if resizable }}} resizable{{{ end }}}{{{ if !isTopicOrMain }}} reply{{{ end }}}">
	<div class="composer-container d-flex flex-column gap-1 h-100">
		<!-- mobile header -->
		<nav class="navbar fixed-top mobile-navbar hidden-md hidden-lg text-bg-primary flex-nowrap gap-1 px-1">
			<div class="btn-group">
				<button class="btn btn-sm btn-primary composer-discard" data-action="discard" tabindex="-1"><i class="fa fa-fw fa-times"></i></button>
				<button class="btn btn-sm btn-primary composer-minimize" data-action="minimize" tabindex="-1"><i class="fa fa-fw fa-minus"></i></button>
			</div>
			{{{ if isTopic }}}
			<div class="category-name-container">
				<span class="category-name"></span> <i class="fa fa-sort"></i>
			</div>
			{{{ end }}}
			{{{ if !isTopicOrMain }}}
			<h4 class="title text-bg-primary">{{{ if isEditing }}}[[topic:composer.editing-in, "{topicTitle}"]]{{{ else }}}[[topic:composer.replying-to, "{topicTitle}"]]{{{ end }}}</h4>
			{{{ end }}}
			<div class="display-scheduler p-2 {{{ if !canSchedule }}} hidden{{{ end }}}">
				<i class="fa fa-clock-o"></i>
			</div>
			{{{ if (privileges.anon && (anonIsin || isAnon)) }}}
				<style>
					.actions-container-mobile {
						border: 1px solid #eaf5ff;
						background-color: #85c1e9;
						padding: 4px;
						border-radius: 6px;
						display: flex;
						justify-content: space-between;
						align-items: center;
					}					
					.actions-container-mobile .form-check-input {
						position: absolute;
						opacity: 0;
						width: 0;
						height: 0;
					}
					.actions-container-mobile .visual-box {
						cursor: pointer;
						border: 1px solid #dee2e6; 
						border-radius: 4px;
						transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
						width: 34px;
						height: 34px;
						padding: 0 !important;
						justify-content: center;
					}
					.actions-container-mobile label:hover .visual-box {
						background-color: #d4eaff;
						border-color: #a3d1f7;
					}
					.actions-container-mobile input:checked + .visual-box {
						background-color: #cce4ff;
						border-color: #0d6efd;
					}
					.actions-container-mobile input:checked + .visual-box:hover {
						background-color: #cce4ff; 
						border-color: #0d6efd;  
					}
				</style>
				<div class="actions-container-mobile">
					<div class="composer-actions-wrapper d-flex align-items-center">
						<div class="anon-options-container d-flex align-items-center gap-1">
								<label class="form-check-label fw-bold mb-0" for="anonymous-radio1-mobile" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="tooltip-custom" title="פרסום אנונימי: פרסם בשם המשתמש האנונימי שלך">
									<input class="form-check-input mt-0" type="radio" name="anon" value="anon" id="anonymous-radio1-mobile" {{{ if (anonDefault == "anon") }}} checked {{{ end }}}>
        
									<span class="visual-box d-inline-flex align-items-center gap-1 px-2 py-0.5">
										{buildAvatar(userAnon, "20px", true)}
									</span>
								</label>
    
								<label class="form-check-label fw-bold mb-0" for="anonymous-radio2-mobile" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="tooltip-custom" title="פרסום רגיל: פרסם בשם המשתמש הרגיל שלך">
									<input class="form-check-input mt-0" type="radio" name="anon" value="regular" id="anonymous-radio2-mobile" {{{ if (anonDefault == "reg") }}} checked {{{ end }}}>
        
									<span class="visual-box d-inline-flex align-items-center gap-1 px-2 py-0.5">
										{buildAvatar(userReg, "20px", true)}
									</span>
								</label>
							<i class="fa-solid fa-circle-info text-muted" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="tooltip-custom" title="יש לבחור אם לפרסם את התגובה באופן אנונימי או תחת שמך המלא. הבחירה נשמרת לפעמים הבאות"></i>
						</div>
					</div>
				
					<div class="btn-group">
						<button class="btn btn-sm btn-primary composer-submit" data-action="post" tabindex="-1"><i class="fa fa-fw fa-chevron-right"></i></button>
					</div>
				</div>
			{{{ else }}}
			<div class="btn-group">
				<button class="btn btn-sm btn-primary composer-submit" data-action="post" tabindex="-1"><i class="fa fa-fw fa-chevron-right"></i></button>
			</div>
			{{{ end }}}
		</nav>
		<div class="p-2 d-flex flex-column gap-1 h-10">
			<!-- IMPORT partials/composer-title-container.tpl -->

			<!-- IMPORT partials/composer-formatting.tpl -->

			<!-- IMPORT partials/composer-write-preview.tpl -->

			{{{ if isTopicOrMain }}}
			<!-- IMPORT partials/composer-tags.tpl -->
			{{{ end }}}

			<div class="imagedrop"><div>[[topic:composer.drag-and-drop-images]]</div></div>

			<div class="resizer position-absolute w-100 bottom-100 pe-3 border-bottom">
				<div class="trigger text-center">
					<div class="handle d-inline-block px-2 py-1 border bg-body">
						<i class="fa fa-fw fa-up-down"></i>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
</file>

<file path="static/templates/partials/composer-title-container.tpl">
<div class="title-container align-items-center gap-2 d-flex">
	{{{ if isTopic }}}
	<div class="category-list-container {{{ if !template.compose }}}d-none d-md-block{{{ end }}} align-self-center">
		<!-- IMPORT partials/category/selector-dropdown-left.tpl -->
	</div>
	{{{ end }}}

	{{{ if showHandleInput }}}
	<div data-component="composer/handle">
		<input class="handle form-control h-100 border-0 shadow-none" type="text" placeholder="[[topic:composer.handle-placeholder]]" value="{handle}" />
	</div>
	{{{ end }}}

	<div data-component="composer/title" class="position-relative flex-1" style="min-width: 0;">
		{{{ if isTopicOrMain }}}
		<input class="title form-control h-100 rounded-1 shadow-none" type="text" placeholder="[[topic:composer.title-placeholder]]" value="{topicTitle}" />
		{{{ else }}}
		<span class="{{{ if !template.compose }}}d-none d-md-block{{{ else }}}d-block{{{ end }}} title h-100 text-truncate">{{{ if isEditing }}}[[topic:composer.editing-in, "{topicTitle}"]]{{{ else }}}[[topic:composer.replying-to, "{topicTitle}"]]{{{ end }}}</span>
		{{{ end }}}
		<div id="quick-search-container" class="quick-search-container mt-2 dropdown-menu d-block p-2 hidden">
			<div class="text-center loading-indicator"><i class="fa fa-spinner fa-spin"></i></div>
			<div class="quick-search-results-container"></div>
		</div>
	</div>
<div class="{{{ if !template.compose }}}d-none d-md-flex{{{ else }}}d-flex{{{ end }}} action-bar gap-1 align-items-center">
	<button class="btn btn-sm btn-link text-body fw-semibold composer-minimize" data-action="hide"><i class="fa fa-angle-down"></i> <span class="d-none d-md-inline">[[topic:composer.hide]]</span></button>
	<button class="btn btn-sm btn-link composer-discard text-body fw-semibold" data-action="discard"><i class="fa fa-trash"></i> <span class="d-none d-md-inline">[[topic:composer.discard]]</button>

    {{{ if (privileges.anon && (anonIsin || isAnon)) }}}
                <style>
.actions-container {
    border: 1px solid #85c1e9;     
    background-color: #eaf5ff;   
    padding: 1px;                 
    border-radius: 0.5px;           
    display: flex;                
    justify-content: space-between;
    align-items: center;           
}

.anon-options-container .d-inline-flex.align-items-center {
    transition: background-color 0.2s ease-in-out;
}

.anon-options-container .d-inline-flex.align-items-center:hover {
    background-color: #d4eaff; 
    cursor: pointer;
}
</style>

    <div class="actions-container">
        <div class="composer-actions-wrapper d-flex align-items-center">
            <div class="anon-options-container d-flex align-items-center gap-1">
                
                    <div class="d-inline-flex align-items-center gap-1 border rounded px-2 py-0.5">
                        <input class="form-check-input mt-0" type="radio" name="anon" value="anon" id="anonymous-radio1" {{{ if (anonDefault == "anon") }}} checked {{{ end }}}>
                        <label class="form-check-label fw-bold mb-0" for="anonymous-radio1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="tooltip-custom" title="פרסם בשם המשתמש הרגיל שלך">
                        {buildAvatar(userAnon, "20px", true)}
                        <span class="d-none d-lg-inline">{nameAnon}</span>
                        </label>
                    </div>
                    <div class="d-inline-flex align-items-center gap-1 border rounded px-2 py-0.5">
                        <input class="form-check-input mt-0" type="radio" name="anon" value="regular" id="anonymous-radio2" {{{ if (anonDefault == "reg") }}} checked {{{ end }}}>
                        <label class="form-check-label fw-bold mb-0" for="anonymous-radio2" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="tooltip-custom" title="פרסם בשם המשתמש העסקי שלך">
                        {buildAvatar(userReg, "20px", true)}
                        <span class="d-none d-lg-inline">{nameRegular}</span>
                        </label>
                    </div>
                
                <i class="fa-solid fa-circle-info text-muted" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="tooltip-custom" title="יש לבחור אם לפרסם את התגובה תחת שם המשתמש הרגיל שלך, או תחת שם העסק. הבחירה נשמרת לפעמים הבאות"></i>
            </div>
        </div>

        <div class="btn-group btn-group-sm" component="composer/submit/container">
            <button class="btn btn-primary composer-submit fw-bold {{{ if !(submitOptions.length || canSchedule) }}}rounded-1{{{ end }}}" data-action="post" data-text-variant=" [[topic:composer.schedule]]"><i class="fa fa-check"></i> <span class="d-none d-md-inline">[[topic:composer.submit]]</span></button>
            <div component="composer/submit/options/container" data-submit-options="{submitOptions.length}" class="btn-group btn-group-sm {{{ if !(submitOptions.length || canSchedule) }}}hidden{{{ end }}}">
                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fa fa-caret-down"></i>
                    <span class="sr-only">[[topic:composer.additional-options]]</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end p-1" role="menu">
                    <li><a class="dropdown-item rounded-1 display-scheduler {{{ if !canSchedule }}}hidden{{{ end }}}" role="menuitem">[[topic:composer.post-later]]</a></li>
                    <li><a class="dropdown-item rounded-1 cancel-scheduling hidden" role="menuitem">[[modules:composer.cancel-scheduling]]</a></li>
                    {{{ each submitOptions }}}
                    <li><a class="dropdown-item rounded-1" href="#" data-action="{./action}" role="menuitem">{./text}</a></li>
                    {{{ end }}}
                </ul>
            </div>
        </div>
    </div>

    {{{ else }}}

    <div class="btn-group btn-group-sm" component="composer/submit/container">
        <button class="btn btn-primary composer-submit fw-bold {{{ if !(submitOptions.length || canSchedule) }}}rounded-1{{{ end }}}" data-action="post" data-text-variant=" [[topic:composer.schedule]]"><i class="fa fa-check"></i> <span class="d-none d-md-inline">[[topic:composer.submit]]</span></button>
        <div component="composer/submit/options/container" data-submit-options="{submitOptions.length}" class="btn-group btn-group-sm {{{ if !(submitOptions.length || canSchedule) }}}hidden{{{ end }}}">
            <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fa fa-caret-down"></i>
                <span class="sr-only">[[topic:composer.additional-options]]</span>
            </button>
            <ul class="dropdown-menu dropdown-menu-end p-1" role="menu">
                <li><a class="dropdown-item rounded-1 display-scheduler {{{ if !canSchedule }}}hidden{{{ end }}}" role="menuitem">[[topic:composer.post-later]]</a></li>
                <li><a class="dropdown-item rounded-1 cancel-scheduling hidden" role="menuitem">[[modules:composer.cancel-scheduling]]</a></li>
                {{{ each submitOptions }}}
                <li><a class="dropdown-item rounded-1" href="#" data-action="{./action}" role="menuitem">{./text}</a></li>
                {{{ end }}}
            </ul>
        </div>
    </div>
    {{{ end }}}
</div>
</div>
</div>
</file>

<file path="static/templates/partials/sidebar/change-user.tpl">
<a component="header/avatar" id="user_dropdown" href="#" role="button" class="nav-link d-flex gap-2 align-items-center text-truncate" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="[[user:user-menu]]">
	{buildAvatar(user2, "20px", true)}
	<span id="user-header-name" class="nav-text small visible-open fw-semibold">{user2.username}</span>
</a>

<ul id="user-control-list" component="header/usercontrol" class="overscroll-behavior-contain user-dropdown dropdown-menu shadow p-1 text-sm ff-base" role="menu">
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="{relative_path}/user/{user2.userslug}" role="menuitem">
			<i class="fa fa-fw fa-user text-secondary"></i>
			<span>{user2.username}</span>
		</a>
	</li>
	<li>
		<a id="user-switch-button" class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="#" role="menuitem">
			<i class="fa fa-fw fa-exchange text-secondary"></i>
			<span>החלף משתמש</span>
		</a>
	</li>
</ul>
</file>

<file path="static/templates/partials/sidebar/user-menu.tpl">
<a component="header/avatar" id="user_dropdown" href="#" role="button" class="nav-link d-flex gap-2 align-items-center text-truncate" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="[[user:user-menu]]">
{buildAvatar(user, "20px", true)}
	<span id="user-header-name" class="nav-text small visible-open fw-semibold">{user.username}</span>
</a>
<ul id="user-control-list" component="header/usercontrol" class="overscroll-behavior-contain user-dropdown dropdown-menu shadow p-1 text-sm ff-base" role="menu">
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" component="header/profilelink" href="{relative_path}/user/{user.userslug}" role="menuitem" aria-label="[[user:profile]]">
			<span component="user/status" class="flex-shrink-0 border border-white border-2 rounded-circle status {user.status}"><span class="visually-hidden">[[global:{user.status}]]</span></span>
			<span class="fw-semibold" component="header/username">{user.username}</span>
		</a>
	</li>
	{{{ if regOrAnon }}}
	<li role="presentation" class="dropdown-divider"></li>
	<li><h6 class="dropdown-header text-xs">החלף משתמש</h6></li>
	<li>
		<a id="user-switch-button" class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="#" role="menuitem">
			{buildAvatar(user2, "20px", true)}
			<span>{user2.username}</span>
		</a>		 
	</li>
	{{{ end }}}
	<li role="presentation" class="dropdown-divider"></li>
	<li><h6 class="dropdown-header text-xs">[[global:status]]</h6></li>
	<li>
		<a href="#" class="dropdown-item rounded-1 user-status d-flex align-items-center gap-2 {{{ if user.online }}}selected{{{ end }}}" data-status="online" role="menuitem">
			<span component="user/status" class="flex-shrink-0 border border-white border-2 rounded-circle status online"></span>
			<span class="flex-grow-1">[[global:online]]</span>
			<i class="fa-solid fa-check text-secondary flex-shrink-0" aria-label="[[global:selected]]"></i>
		</a>
	</li>
	<li>
		<a href="#" class="dropdown-item rounded-1 user-status d-flex align-items-center gap-2 {{{ if user.away }}}selected{{{ end }}}" data-status="away" role="menuitem">
			<span component="user/status" class="flex-shrink-0 border border-white border-2 rounded-circle status away"></span>
			<span class="flex-grow-1">[[global:away]]</span>
			<i class="fa-solid fa-check text-secondary flex-shrink-0"><span class="visually-hidden">[[global:selected]]</span></i>
		</a>
	</li>
	<li>
		<a href="#" class="dropdown-item rounded-1 user-status d-flex align-items-center gap-2 {{{ if user.dnd }}}selected{{{ end }}}" data-status="dnd" role="menuitem">
			<span component="user/status" class="flex-shrink-0 border border-white border-2 rounded-circle status dnd"></span>
			<span class="flex-grow-1">[[global:dnd]]</span>
			<i class="fa-solid fa-check text-secondary flex-shrink-0"></i>
		</a>
	</li>
	<li>
		<a href="#" class="dropdown-item rounded-1 user-status d-flex align-items-center gap-2 {{{ if user.offline }}}selected{{{ end }}}" data-status="offline" role="menuitem">
			<span component="user/status" class="flex-shrink-0 border border-white border-2 rounded-circle status offline"></span>
			<span class="flex-grow-1">[[global:invisible]]</span>
			<i class="fa-solid fa-check text-secondary flex-shrink-0"></i>
		</a>
	</li>
	<li role="presentation" class="dropdown-divider"></li>
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="{relative_path}/user/{user.userslug}/bookmarks" role="menuitem">
			<i class="fa fa-fw fa-bookmark text-secondary"></i> <span>[[user:bookmarks]]</span>
		</a>
	</li>
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" component="header/profilelink/edit" href="{relative_path}/user/{user.userslug}/edit" role="menuitem">
			<i class="fa fa-fw fa-edit text-secondary"></i> <span>[[user:edit-profile]]</span>
		</a>
	</li>
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" component="header/profilelink/settings" href="{relative_path}/user/{user.userslug}/settings" role="menuitem">
			<i class="fa fa-fw fa-gear text-secondary"></i> <span>[[user:settings]]</span>
		</a>
	</li>
	{{{ if showModMenu }}}
	<li role="presentation" class="dropdown-divider"></li>
	<li><h6 class="dropdown-header text-xs">[[pages:moderator-tools]]</h6></li>
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="{relative_path}/flags" role="menuitem">
			<i class="fa fa-fw fa-flag text-secondary"></i> <span>[[pages:flagged-content]]</span>
		</a>
	</li>
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="{relative_path}/post-queue" role="menuitem">
			<i class="fa fa-fw fa-list-alt text-secondary"></i> <span>[[pages:post-queue]]</span>
		</a>
	</li>
	{{{ if registrationQueueEnabled }}}
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="{relative_path}/registration-queue" role="menuitem">
			<i class="fa fa-fw fa-list-alt text-secondary"></i> <span>[[pages:registration-queue]]</span>
		</a>
	</li>
	{{{ end }}}
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="{relative_path}/ip-blacklist" role="menuitem">
			<i class="fa fa-fw fa-ban text-secondary"></i> <span>[[pages:ip-blacklist]]</span>
		</a>
	</li>
	{{{ else }}}
	{{{ if postQueueEnabled }}}
	<li>
		<a class="dropdown-item rounded-1 d-flex align-items-center gap-2" href="{relative_path}/post-queue" role="menuitem">
			<i class="fa fa-fw fa-list-alt text-secondary"></i> <span>[[pages:post-queue]]</span>
		</a>
	</li>
	{{{ end }}}
	{{{ end }}}

	<li role="presentation" class="dropdown-divider"></li>
	<li component="user/logout">
		<form method="post" action="{relative_path}/logout" role="menuitem">
			<input type="hidden" name="_csrf" value="{config.csrf_token}">
			<input type="hidden" name="noscript" value="true">
			<button type="submit" class="dropdown-item rounded-1 d-flex align-items-center gap-2">
				<i class="fa fa-fw fa-sign-out text-secondary"></i><span>[[global:logout]]</span>
			</button>
		</form>
	</li>
</ul>
</file>

</files>
